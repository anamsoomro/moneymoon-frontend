{"ast":null,"code":"let today = new Date();\nconst initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n  transactionsDisplay: [],\n  accountsDisplay: [],\n  monthDisplay: [],\n  monthCalcs: [],\n  userView: null,\n  typeView: null,\n  accountView: null,\n  // monthView: today.getMonth() + 1,\n  monthView: 4,\n  showCategories: false,\n  categoryView: null\n};\nexport default function linkReducer(state = initialState, action) {\n  const handleAccountsDisplay = accounts => {\n    if (state.userView) {\n      accounts = accounts.filter(account => account.user.username === state.userView);\n    }\n\n    if (state.typeView) {\n      if (state.typeView === \"debt\") {\n        // credit and loan\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\");\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView); // investment or depository\n      }\n    }\n\n    accounts = accounts.sort((acc1, acc2) => acc1.type > acc2.type ? 1 : -1);\n    return accounts;\n  };\n\n  const handleTransactionsDisplay = (transactions, accounts) => {\n    if (state.typeView) {\n      //  accountsDisplay will already be filtered to account types selected and whatever else is set \n      let account_ids = accounts.map(account => account.account_id); // [account_ids]\n\n      transactions = transactions.filter(transaction => account_ids.includes(transaction.account_id));\n    }\n\n    if (state.userView) {\n      transactions = transactions.filter(transaction => transaction.user.username === state.userView);\n    }\n\n    if (state.accountView) {\n      transactions = transactions.filter(transaction => transaction.account_id === state.accountView);\n    }\n\n    transactions = transactions.sort((trans1, trans2) => trans1.date > trans2.date ? -1 : 1);\n    return transactions;\n  };\n\n  const handleMonthDisplay = transactions => {\n    if (state.userView) {\n      transactions = transactions.filter(items => items.user.username === state.userView);\n    }\n\n    if (state.categoryView) {\n      transactions = transactions.filter(transaction => transaction.category[0] === state.categoryView);\n    }\n\n    transactions = transactions.sort((trans1, trans2) => trans1.date > trans2.date ? -1 : 1);\n    return transactions;\n  };\n\n  const handleMonthOnlyUser = transactions => {\n    if (state.userView) {\n      transactions = transactions.filter(items => items.user.username === state.userView);\n    }\n\n    return transactions;\n  };\n\n  switch (action.type) {\n    case 'storeData':\n      let monthTransactions = action.data.transactions.filter(transaction => parseInt(transaction.date.slice(5, 7)) === state.monthView);\n      return { ...state,\n        transactions: action.data.transactions,\n        accounts: action.data.accounts,\n        monthTransactions: monthTransactions\n      };\n\n    case 'addData':\n      let addMonth = action.data.transactions.filter(transaction => parseInt(transaction.date.slice(5, 7)) === state.monthView);\n      return { ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts],\n        monthTransactions: [...state.monthTransactions, ...addMonth]\n      };\n\n    case \"handleDisplay\":\n      // in here trendReducer.both's arrays are getting reassigned\n      let accountsDisplay = handleAccountsDisplay(state.accounts);\n      let transactionsDisplay = handleTransactionsDisplay(state.transactions, accountsDisplay); // pass accounts to filter tran by typeView\n\n      return { ...state,\n        transactionsDisplay: transactionsDisplay,\n        accountsDisplay: accountsDisplay,\n        monthDisplay: handleMonthDisplay(state.monthTransactions),\n        monthCalcs: handleMonthOnlyUser(state.monthTransactions)\n      };\n\n    case 'setUserView':\n      return { ...state,\n        userView: action.username,\n        accountView: null // dont hold on to account filter\n\n      };\n\n    case \"setTypeView\":\n      let typeView = action.filter;\n      return { ...state,\n        typeView: typeView,\n        accountView: null // dont hold on to account filter\n\n      };\n\n    case \"setAccountView\":\n      let accountView = action.filter;\n\n      if (accountView === state.accountView) {\n        accountView = null;\n      }\n\n      return { ...state,\n        accountView: accountView\n      };\n\n    case \"removeBank\":\n      let accounts = state.accounts.filter(account => account.item_id !== action.item_id);\n      let transactions = state.transactions.filter(transaction => transaction.item_id !== action.item_id);\n      return { ...state,\n        accounts: accounts,\n        transactions: transactions\n      };\n\n    case \"setMonthView\":\n      return { ...state,\n        monthView: action.month\n      };\n\n    case \"storeMonth\":\n      return { ...state,\n        monthTransactions: action.transactions\n      };\n\n    case \"setShowCategories\":\n      return { ...state,\n        showCategories: !state.showCategories,\n        categoryView: null\n      };\n\n    case \"setCategoryView\":\n      let categoryView = action.category;\n\n      if (categoryView === state.categoryView) {\n        categoryView = null;\n      }\n\n      return { ...state,\n        categoryView: categoryView\n      };\n\n    case \"resetLink\":\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/linkReducer.js"],"names":["today","Date","initialState","transactions","accounts","monthTransactions","transactionsDisplay","accountsDisplay","monthDisplay","monthCalcs","userView","typeView","accountView","monthView","showCategories","categoryView","linkReducer","state","action","handleAccountsDisplay","filter","account","user","username","type","sort","acc1","acc2","handleTransactionsDisplay","account_ids","map","account_id","transaction","includes","trans1","trans2","date","handleMonthDisplay","items","category","handleMonthOnlyUser","data","parseInt","slice","addMonth","item_id","month"],"mappings":"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","sourcesContent":["let today = new Date\nconst initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n\n  transactionsDisplay: [],\n  accountsDisplay: [],\n  monthDisplay: [],\n  monthCalcs: [],\n\n  userView: null,\n  typeView: null,\n  accountView: null,\n  // monthView: today.getMonth() + 1,\n  monthView: 4,\n\n  showCategories: false,\n  categoryView: null,\n}\n\nexport default function linkReducer(state=initialState, action){\n\n  const handleAccountsDisplay = (accounts) => {\n    if (state.userView){\n      accounts = accounts.filter(account => account.user.username === state.userView)\n    } \n    if (state.typeView){\n      if (state.typeView === \"debt\"){ // credit and loan\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\")\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView) // investment or depository\n      }\n    }\n    accounts = accounts.sort( (acc1, acc2) => acc1.type > acc2.type ? 1 : -1 )\n    return accounts \n  }\n\n  const handleTransactionsDisplay = (transactions, accounts) => {\n    if (state.typeView){ //  accountsDisplay will already be filtered to account types selected and whatever else is set \n      let account_ids = accounts.map(account => account.account_id) // [account_ids]\n      transactions = transactions.filter(transaction => account_ids.includes(transaction.account_id) )\n    }\n    if (state.userView){\n      transactions = transactions.filter(transaction => transaction.user.username === state.userView)\n    } \n    if (state.accountView){\n      transactions = transactions.filter(transaction => transaction.account_id === state.accountView)\n    }\n    transactions = transactions.sort( (trans1, trans2) => trans1.date > trans2.date ? -1 : 1 )\n    return transactions \n  }\n\n  const handleMonthDisplay = (transactions) => {\n    if (state.userView){\n      transactions = transactions.filter(items => items.user.username === state.userView)\n    } \n    if (state.categoryView){\n      transactions = transactions.filter(transaction => transaction.category[0] === state.categoryView)\n    }\n    transactions = transactions.sort( (trans1, trans2) => trans1.date > trans2.date ? -1 : 1 )\n    return transactions\n  }\n\n  const handleMonthOnlyUser = (transactions) => {\n    if (state.userView){\n      transactions = transactions.filter(items => items.user.username === state.userView)\n    } \n    return transactions\n  }\n\n  switch(action.type){\n\n    case 'storeData': \n      let monthTransactions = action.data.transactions.filter(transaction => \n        parseInt(transaction.date.slice(5, 7)) === state.monthView\n      )\n      return{\n        ...state,\n        transactions: action.data.transactions,\n        accounts: action.data.accounts,\n        monthTransactions: monthTransactions\n      }\n\n    case 'addData':\n      let addMonth = action.data.transactions.filter(transaction => \n        parseInt(transaction.date.slice(5, 7)) === state.monthView\n      )\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts],\n        monthTransactions: [...state.monthTransactions, ...addMonth]\n      }\n    case \"handleDisplay\":\n      // in here trendReducer.both's arrays are getting reassigned\n      let accountsDisplay = handleAccountsDisplay(state.accounts)\n      let transactionsDisplay = handleTransactionsDisplay(state.transactions, accountsDisplay) // pass accounts to filter tran by typeView\n      return{\n        ...state,\n        transactionsDisplay: transactionsDisplay,\n        accountsDisplay: accountsDisplay,\n        monthDisplay: handleMonthDisplay(state.monthTransactions),\n        monthCalcs: handleMonthOnlyUser(state.monthTransactions)\n      }\n    case 'setUserView': \n      return {\n        ...state,\n        userView: action.username,\n        accountView: null // dont hold on to account filter\n      }\n    case \"setTypeView\": \n      let typeView = action.filter\n      return {\n        ...state,\n        typeView: typeView,\n        accountView: null // dont hold on to account filter\n      }\n    case \"setAccountView\": \n      let accountView = action.filter\n      if (accountView === state.accountView){accountView = null} \n      return {\n        ...state,\n        accountView: accountView\n      }\n    case \"removeBank\":\n      let accounts = state.accounts.filter(account => account.item_id !== action.item_id)\n      let transactions = state.transactions.filter(transaction => transaction.item_id !== action.item_id)\n      return{\n        ...state,\n        accounts: accounts,\n        transactions: transactions\n      }\n    case \"setMonthView\":\n      return{\n        ...state,\n        monthView: action.month\n      }\n    case \"storeMonth\":\n      return {\n        ...state,\n        monthTransactions: action.transactions\n      }\n    case \"setShowCategories\":\n      return {\n        ...state,\n        showCategories: !state.showCategories,\n        categoryView: null\n      }\n    case \"setCategoryView\":\n      let categoryView = action.category\n      if (categoryView === state.categoryView){categoryView = null} \n      return{\n        ...state,\n        categoryView: categoryView\n      }\n    case \"resetLink\":\n      return initialState;\n\n    default: {\n      return state\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}