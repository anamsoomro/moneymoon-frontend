{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/Link.js\";\nimport React, { Component } from \"react\";\nimport { PlaidLink, usePlaidLink } from \"react-plaid-link\";\nimport { connect } from 'react-redux';\nimport { trackPromise } from 'react-promise-tracker';\n\nclass Link extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleOnSuccess = (public_token, metadata) => {\n      trackPromise(fetch(\"http://localhost:3000/get_access_token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          public_token: public_token,\n          user_id: localStorage.user_id,\n          institution: metadata.institution.name // always inject it in the back end\n\n        })\n      }).then(resp => resp.json()).then(data => {\n        console.log(\"sweet now you got a access token and some data\");\n\n        if (data.error) {\n          alert(data.error);\n        } else {\n          // transactions have account_ids, need to add account_names and institution\n          let transactions = data.transactions.map(tran => {\n            let account = data.accounts.filter(acc => {\n              // this seems expensive way of doing this\n              return acc.account_id === tran.account_id;\n            }); // return {...tran, account_name: account[0].name, institution: metadata.institution.name}\n\n            return { ...tran,\n              account_name: account[0].name\n            };\n          });\n          this.props.addData({\n            transactions: transactions,\n            accounts: data.accounts\n          });\n          this.props.handleDisplay();\n        }\n      }));\n    };\n  }\n\n  render(props) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PlaidLink, {\n      style: {\n        background: \"transparent\",\n        border: \"0px\",\n        color: \"#fff\"\n      },\n      clientName: \"front-end\",\n      env: \"sandbox\" // \"development\"\n      ,\n      product: [\"transactions\"] // product={[\"auth\", \"transactions\"]} what ddoes this actually do \n      ,\n      publicKey: \"38e9fa8478f20a384db53c1176e9b7\",\n      onExit: this.handleOnExit,\n      onSuccess: this.handleOnSuccess,\n      className: \"test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, this.props.text));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user_id: state.authReducer.user.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addData: data => dispatch({\n      type: \"addData\",\n      data: data\n    }),\n    handleDisplay: () => dispatch({\n      type: \"handleDisplay\"\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Link);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/Link.js"],"names":["React","Component","PlaidLink","usePlaidLink","connect","trackPromise","Link","handleOnSuccess","public_token","metadata","fetch","method","headers","Authorization","localStorage","token","body","JSON","stringify","user_id","institution","name","then","resp","json","data","console","log","error","alert","transactions","map","tran","account","accounts","filter","acc","account_id","account_name","props","addData","handleDisplay","render","background","border","color","handleOnExit","text","mapStateToProps","state","authReducer","user","id","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport { PlaidLink, usePlaidLink }from \"react-plaid-link\";\nimport {connect} from 'react-redux'\nimport { trackPromise } from 'react-promise-tracker'\n\n\nclass Link extends Component {\n\n  handleOnSuccess = (public_token, metadata) => {\n    trackPromise(\n    fetch(\"http://localhost:3000/get_access_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({\n        public_token: public_token,\n        user_id: localStorage.user_id, \n        institution: metadata.institution.name // always inject it in the back end\n      })\n    })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(\"sweet now you got a access token and some data\")\n      if (data.error){\n        alert(data.error)\n      } else {\n        // transactions have account_ids, need to add account_names and institution\n        let transactions = data.transactions.map( tran => {\n          let account = data.accounts.filter( acc => { // this seems expensive way of doing this\n            return acc.account_id === tran.account_id\n          })\n          // return {...tran, account_name: account[0].name, institution: metadata.institution.name}\n          return {...tran, account_name: account[0].name}\n\n        })\n        this.props.addData({ \n          transactions: transactions, \n          accounts: data.accounts\n        })\n        this.props.handleDisplay()\n      }\n    })\n    )\n  }\n\n  \n\n  render(props) {\n    return (\n      <div>\n        <PlaidLink\n          style={{background: \"transparent\", border: \"0px\", color: \"#fff\"}}\n          clientName=\"front-end\"\n          env=\"sandbox\" // \"development\"\n          product={[\"transactions\"]} // product={[\"auth\", \"transactions\"]} what ddoes this actually do \n          publicKey=\"38e9fa8478f20a384db53c1176e9b7\"\n          onExit={this.handleOnExit}\n          onSuccess={this.handleOnSuccess}\n          className=\"test\">\n          {this.props.text}\n        </PlaidLink>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { \n    user_id: state.authReducer.user.id\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addData: ( (data) => dispatch({type: \"addData\", data: data})),\n    handleDisplay: ( () => dispatch({type: \"handleDisplay\"}))\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(Link);\n"]},"metadata":{},"sourceType":"module"}