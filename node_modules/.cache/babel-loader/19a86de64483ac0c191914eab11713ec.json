{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/MonthGauge.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { Doughnut, Pie } from 'react-chartjs-2';\nimport ToggleMonth from \"./ToggleMonth\";\n\nconst MonthGauge = props => {\n  let today = new Date();\n  let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let currentMonth = month[today.getMonth()];\n  let moneyIn = props.transactions.reduce((acc, i) => {\n    if (i.amount < 0) {\n      //  \"transaction with a negative amount represents money flowing into the account\"\n      return -i.amount + acc;\n    } else if (i.account_name.includes(\"Money Market\") && i.amount > 0) {\n      // these doesnt' align with plaid's above statement. review. \n      return i.amount + acc;\n    } else if (i.account_name.includes(\"CD\") && i.amount > 0) {\n      return i.amount + acc;\n    } else {\n      return acc;\n    }\n  }, 0);\n  let moneyOut = props.transactions.reduce((acc, i) => {\n    if (i.amount > 0 && !i.account_name.includes(\"Money Market\") && !i.account_name.includes(\"CD\")) {\n      return acc + i.amount;\n    } else {\n      return acc;\n    }\n  }, 0);\n  let moneyLeft = moneyIn - moneyOut;\n  let moneyNeg = moneyOut - moneyIn;\n  let saved = (moneyIn - moneyOut) / moneyIn * 100;\n  saved = saved < 0 ? 0 : saved;\n  let values = [moneyIn, moneyOut, moneyLeft, moneyNeg];\n\n  const norm = arr => {\n    let min = arr.slice().sort((a, b) => a < b ? -1 : 1).shift();\n    let positive = arr.map(x => x - min);\n    let max = positive.slice().sort((a, b) => a < b ? -1 : 1).pop();\n    let norm = positive.map(x => x / max);\n    return norm;\n  };\n\n  const data = {\n    labels: ['money in', 'money out', 'money left', 'money negative'],\n    datasets: [{\n      label: 'out',\n      backgroundColor: ['#B21F00', '#ff3300'],\n      labels: ['money in', 'money out', 'money left', 'money negative'],\n      data: [null, norm(values)[1], norm(values)[2], null],\n      borderWidth: 0\n    }, {\n      label: 'in',\n      backgroundColor: ['#0033cc'],\n      labels: ['money in', 'money out', 'money left', 'money negative'],\n      data: [norm(values)[0], null, null, norm(values)[3]],\n      borderWidth: 0\n    }]\n  };\n  const options = {\n    title: {\n      display: false,\n      text: currentMonth,\n      fontSize: 20\n    },\n    legend: {\n      display: false,\n      position: 'right'\n    },\n    rotation: 1 * Math.PI,\n    circumference: 1 * Math.PI,\n    maintainAspectRatio: false,\n    tooltips: {\n      enabled: false\n    },\n    hover: {\n      mode: null\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    width: 200,\n    height: 350,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    // transactions: state.linkReducer.monthTransactions,\n    transactions: state.linkReducer.monthDisplay\n  };\n};\n\nconst mapDispacthToProps = dispatch => {\n  return {\n    dispatch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispacthToProps)(MonthGauge);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/MonthGauge.js"],"names":["React","connect","Doughnut","Pie","ToggleMonth","MonthGauge","props","today","Date","month","currentMonth","getMonth","moneyIn","transactions","reduce","acc","i","amount","account_name","includes","moneyOut","moneyLeft","moneyNeg","saved","values","norm","arr","min","slice","sort","a","b","shift","positive","map","x","max","pop","data","labels","datasets","label","backgroundColor","borderWidth","options","title","display","text","fontSize","legend","position","rotation","Math","PI","circumference","maintainAspectRatio","tooltips","enabled","hover","mode","mapStateToProps","state","linkReducer","monthDisplay","mapDispacthToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux'\nimport { Doughnut, Pie } from 'react-chartjs-2'\nimport ToggleMonth from \"./ToggleMonth\"\n\nconst MonthGauge = (props) => { \n\n  let today = new Date\n  let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  let currentMonth = month[today.getMonth()]\n\n  let moneyIn = props.transactions.reduce( (acc, i) => {\n    if (i.amount < 0 ){ //  \"transaction with a negative amount represents money flowing into the account\"\n    return (-i.amount + acc)\n    } else if(i.account_name.includes(\"Money Market\") && i.amount > 0){ // these doesnt' align with plaid's above statement. review. \n    return (i.amount + acc)\n    } else if(i.account_name.includes(\"CD\") && i.amount > 0 ){\n      return (i.amount + acc)\n    } else { \n      return acc\n    }\n  }, 0)\n\n  let moneyOut = props.transactions.reduce ( (acc, i) => {\n    if(i.amount > 0 && !i.account_name.includes(\"Money Market\") && !i.account_name.includes(\"CD\")){\n      return(acc + i.amount)\n    } else { \n      return acc\n    }\n  }, 0)\n\n  let moneyLeft = moneyIn - moneyOut\n  let moneyNeg = moneyOut - moneyIn\n  let saved = ((moneyIn - moneyOut) / moneyIn) * 100\n  saved = saved < 0 ? 0 : saved\n  let values = [moneyIn, moneyOut, moneyLeft, moneyNeg]\n\n  const norm = (arr) => { \n    let min = arr.slice().sort((a, b) => a < b ? -1 : 1).shift()\n    let positive = arr.map(x => x - min)\n    let max = positive.slice().sort((a, b) => a < b ? -1 : 1).pop()\n    let norm = positive.map(x => x/max)\n    return norm\n  }\n\n  const data = {\n    labels: ['money in', 'money out', 'money left', 'money negative'],\n    datasets: [\n      {\n        label: 'out',\n        backgroundColor: ['#B21F00', '#ff3300'],\n        labels: ['money in', 'money out', 'money left', 'money negative'],\n        data: [null, norm(values)[1], norm(values)[2], null],\n        borderWidth: 0\n      },\n      {\n        label: 'in',\n        backgroundColor: ['#0033cc'],\n        labels: ['money in', 'money out', 'money left', 'money negative'],\n        data: [norm(values)[0], null, null, norm(values)[3]],\n        borderWidth: 0\n      }\n    ]\n  }\n\n  const options = {\n    title:{\n      display:false,\n      text: currentMonth,\n      fontSize:20\n    },\n    legend:{\n      display:false,\n      position:'right'\n    },\n    rotation: 1 * Math.PI, \n    circumference: 1 * Math.PI ,\n    maintainAspectRatio: false,\n\n    tooltips: {enabled: false},\n    hover: {mode: null},\n  }\n\n  return (\n    <div>\n      <Doughnut data={data} options={options} width={200} height={350} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    // transactions: state.linkReducer.monthTransactions,\n    transactions: state.linkReducer.monthDisplay,\n\n  }\n}\n\nconst mapDispacthToProps = (dispatch) => {\n  return {\n    dispatch\n  }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(MonthGauge)"]},"metadata":{},"sourceType":"module"}