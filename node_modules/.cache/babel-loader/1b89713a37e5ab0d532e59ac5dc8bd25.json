{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/MonthSummary.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport ToggleMonth from '../components/ToggleMonth';\n\nconst MonthSummary = props => {\n  const formatNumber = (num, percent = null) => {\n    if (percent) {\n      return num.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') + '%';\n    } else {\n      return '$' + num.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    }\n  };\n\n  let moneyIn = props.transactions.reduce((acc, i) => {\n    if (i.amount < 0) {\n      //  \"transaction with a negative amount represents money flowing into the account\"\n      return -i.amount + acc;\n    } else if (i.account_name.includes(\"Money Market\") && i.amount > 0) {\n      // these doesnt' align with plaid's above statement. review. \n      return i.amount + acc;\n    } else if (i.account_name.includes(\"CD\") && i.amount > 0) {\n      return i.amount + acc;\n    } else {\n      return acc;\n    }\n  }, 0);\n  let moneyOut = props.transactions.reduce((acc, i) => {\n    if (i.amount > 0 && !i.account_name.includes(\"Money Market\") && !i.account_name.includes(\"CD\")) {\n      return acc + i.amount;\n    } else {\n      return acc;\n    }\n  }, 0);\n  let saved = (moneyIn - moneyOut) / moneyIn * 100;\n  saved = saved < 0 ? 0 : saved;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"small material-icons\",\n    style: {\n      color: \"#0033cc\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"brightness_1\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"INCOME: \", formatNumber(moneyIn)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 51\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"small material-icons\",\n    style: {\n      color: \"#ff3300\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"brightness_1\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"SPENT: \", formatNumber(moneyOut)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 51\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"SAVED: \", formatNumber(moneyIn - moneyOut)), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 61\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \" \", formatNumber(saved, \"percent\"), \" SAVED\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary btn-lg btn-block\",\n    onClick: props.setShowCategories,\n    style: {\n      color: \"white\",\n      backgroundColor: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \" Show Categories \")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    // transactions: state.linkReducer.monthTransactions,\n    // transactions: state.linkReducer.monthDisplay,\n    transactions: state.linkReducer.monthCalcs\n  };\n};\n\nconst mapDispacthToProps = dispatch => {\n  return {\n    setShowCategories: () => dispatch({\n      type: \"setShowCategories\"\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispacthToProps)(MonthSummary);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/MonthSummary.js"],"names":["React","connect","ToggleMonth","MonthSummary","props","formatNumber","num","percent","toFixed","replace","moneyIn","transactions","reduce","acc","i","amount","account_name","includes","moneyOut","saved","color","setShowCategories","backgroundColor","mapStateToProps","state","linkReducer","monthCalcs","mapDispacthToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux'\nimport ToggleMonth from '../components/ToggleMonth'\n\nconst MonthSummary = (props) => {\n\n  const formatNumber = (num, percent = null) => {\n    if (percent){\n      return  num.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') + '%'\n    }\n    else {\n      return '$' + num.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n    }\n  }\n\n  let moneyIn = props.transactions.reduce( (acc, i) => {\n    if (i.amount < 0 ){ //  \"transaction with a negative amount represents money flowing into the account\"\n    return (-i.amount + acc)\n    } else if(i.account_name.includes(\"Money Market\") && i.amount > 0){ // these doesnt' align with plaid's above statement. review. \n    return (i.amount + acc)\n    } else if(i.account_name.includes(\"CD\") && i.amount > 0 ){\n      return (i.amount + acc)\n    } else { \n      return acc\n    }\n  }, 0)\n\n  let moneyOut = props.transactions.reduce ( (acc, i) => {\n    if(i.amount > 0 && !i.account_name.includes(\"Money Market\") && !i.account_name.includes(\"CD\")){\n      return(acc + i.amount)\n    } else { \n      return acc\n    }\n  }, 0)\n\n  let saved = ((moneyIn - moneyOut) / moneyIn )*100\n  saved = saved < 0 ? 0 : saved\n\n  return (\n    <div> \n      <div>\n          <i className=\"small material-icons\" style={{color: \"#0033cc\"}}>brightness_1</i>\n          <h4>INCOME: {formatNumber(moneyIn)}</h4><br/>\n\n          <i className=\"small material-icons\" style={{color: \"#ff3300\"}}>brightness_1</i>\n          <h4>SPENT: {formatNumber(moneyOut)}</h4><br/>\n\n          <h4>SAVED: {formatNumber(moneyIn - moneyOut)}</h4><br/>\n          {/* <h4 style={{position: \"relative\", left: \"217px\", top: \"-336px\"}}> {formatNumber(saved, \"percent\")}</h4> */}\n          <h4 > {formatNumber(saved, \"percent\")} SAVED</h4>\n          <button type=\"button\" className=\"btn btn-primary btn-lg btn-block\" onClick={props.setShowCategories} style={{color: \"white\", backgroundColor: \"black\"}}> Show Categories </button>\n      </div>\n    </div>\n  )\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    // transactions: state.linkReducer.monthTransactions,\n    // transactions: state.linkReducer.monthDisplay,\n    transactions: state.linkReducer.monthCalcs,\n\n\n\n  }\n}\n\nconst mapDispacthToProps = (dispatch) => {\n  return {\n    setShowCategories: () => dispatch({type: \"setShowCategories\"})\n  }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(MonthSummary)"]},"metadata":{},"sourceType":"module"}