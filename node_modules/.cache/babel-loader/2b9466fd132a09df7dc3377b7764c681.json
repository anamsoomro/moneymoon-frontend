{"ast":null,"code":"// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\nconst initialState = {\n  // let user1 = {\n  //   saving: u1Saving, \n  //   debt: u1Debt, \n  //   investment: u1Investment, \n  //   overall: u1Overall,\n  //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n  //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n  //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n  //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n  // }\n  user1: null,\n  user2: null,\n  both: null,\n  display: null // either u1, u2 or both\n\n};\n\nconst addTwoArrays = (arr1, arr2) => {\n  let result = [];\n\n  for (let i = 0; i < arr1.length; i++) {\n    result.push(arr1[i] + arr2[i]);\n  }\n\n  return result;\n};\n\nexport default function trendReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'storeHistory':\n      let both = null;\n\n      if (action.user2) {\n        both = {\n          saving: addTwoArrays(action.user1.saving, action.user2.saving),\n          // array plus an array\n          debt: addTwoArrays(action.user1.debt, action.user2.debt),\n          investment: addTwoArrays(action.user1.investment, action.user2.investment),\n          overall: addTwoArrays(action.user1.overall, action.user2.overall),\n          mSaving: action.user1.mSaving + action.user2.mSaving,\n          mDebt: action.user1.mDebt + action.user2.mDebt,\n          mInvestment: action.user1.mInvestment + action.user2.mInvestment,\n          mOverall: action.user1.mOverall + action.user2.mOverall\n        };\n      }\n\n      debugger;\n      return { ...state,\n        user1: action.user1,\n        user2: action.user2,\n        both: both\n      };\n\n    case 'handleTrendDisplay':\n      let display;\n\n      if (action.userView === localStorage.user1) {\n        display = state.user1;\n      } else if (localStorage.user2 && action.userView === localStorage.user2) {\n        display = state.user2;\n      } else {\n        display = state.both;\n      }\n\n      return { ...state,\n        display: display\n      };\n    //  the below adjustments should be done on the display numbers.\n    // display.mSaving, display.mDebt, display.mOverall \n    // resetTrends should throw it back to the original data display = user1 2 or both \n    // resetTrends should just call handleTrendDisplay\n\n    case 'adjustSavings':\n      let a = action.mSavings + state.display.mInvestment - state.display.mDebt;\n      return { ...state,\n        display: { ...state.display,\n          mSaving: action.mSavings,\n          mOverall: a\n        }\n      };\n\n    case 'adjustDebt':\n      let b = state.display.mSaving + state.display.mInvestment - action.mDebt;\n      return { ...state,\n        display: { ...state.display,\n          mDebt: action.mDebt,\n          mOverall: b\n        }\n      };\n\n    case \"resetTrends\":\n      let reset;\n\n      if (action.userView === localStorage.user1) {\n        reset = state.user1;\n      } else if (localStorage.user2 && action.userView === localStorage.user2) {\n        reset = state.user2;\n      } else {\n        reset = state.both;\n      }\n\n      return { ...state,\n        display: reset\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/trendReducer.js"],"names":["initialState","user1","user2","both","display","addTwoArrays","arr1","arr2","result","i","length","push","trendReducer","state","action","type","saving","debt","investment","overall","mSaving","mDebt","mInvestment","mOverall","userView","localStorage","a","mSavings","b","reset"],"mappings":"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","sourcesContent":["\n// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n  \n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n\n\n\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n\n\n\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n\nconst initialState = {\n    // let user1 = {\n    //   saving: u1Saving, \n    //   debt: u1Debt, \n    //   investment: u1Investment, \n    //   overall: u1Overall,\n    //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n    //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n    //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n    //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n    // }\n    user1: null,\n    user2: null, \n    both: null,\n    display: null // either u1, u2 or both\n}\n\nconst addTwoArrays = (arr1, arr2) => {\n  let result = []\n  for (let i=0; i<arr1.length; i++){\n    result.push(arr1[i] + arr2[i])\n  }\n  return result\n}\n\n\n\nexport default function trendReducer (state=initialState, action){\n\n  switch(action.type){\n\n    case 'storeHistory':\n      let both = null\n      if(action.user2){\n        both = {\n          saving: addTwoArrays(action.user1.saving, action.user2.saving), // array plus an array\n          debt: addTwoArrays(action.user1.debt, action.user2.debt),\n          investment: addTwoArrays(action.user1.investment, action.user2.investment),\n          overall: addTwoArrays(action.user1.overall, action.user2.overall),\n          mSaving: action.user1.mSaving + action.user2.mSaving,\n          mDebt: action.user1.mDebt + action.user2.mDebt,\n          mInvestment: action.user1.mInvestment + action.user2.mInvestment,\n          mOverall: action.user1.mOverall + action.user2.mOverall,\n        }}\n      debugger\n      return {\n        ...state,\n        user1: action.user1,\n        user2: action.user2,\n        both: both,\n      }\n    \n    case 'handleTrendDisplay': \n      let display\n      if (action.userView === localStorage.user1 ){display = state.user1}\n      else if (localStorage.user2 && action.userView === localStorage.user2 ){display = state.user2}\n      else {display = state.both}\n\n        return {\n          ...state,\n          display: display \n        }\n    //  the below adjustments should be done on the display numbers.\n    // display.mSaving, display.mDebt, display.mOverall \n    // resetTrends should throw it back to the original data display = user1 2 or both \n    // resetTrends should just call handleTrendDisplay\n\n    \n\n    case 'adjustSavings':\n      let a  = action.mSavings + state.display.mInvestment - state.display.mDebt\n      return{ \n        ...state,\n        display:{\n          ...state.display,\n          mSaving: action.mSavings,\n          mOverall: a\n        }\n      }\n    case 'adjustDebt':\n      let b = state.display.mSaving + state.display.mInvestment - action.mDebt\n      return{ \n        ...state,\n        display:{\n          ...state.display,\n          mDebt: action.mDebt,\n          mOverall: b\n        }\n      }\n    case \"resetTrends\":\n      let reset\n      if (action.userView === localStorage.user1 ){reset = state.user1}\n      else if (localStorage.user2 && action.userView === localStorage.user2 ){reset = state.user2}\n      else {reset = state.both}\n      return {\n        ...state,\n        display: reset\n      }\n    default: {\n      return state\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}