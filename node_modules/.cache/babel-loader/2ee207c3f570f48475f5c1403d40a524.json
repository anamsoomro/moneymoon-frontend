{"ast":null,"code":"const initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n  displayTransactions: [],\n  displayAccounts: [],\n  userView: null\n};\nexport default function linkReducer(state = initialState, action) {\n  const handleDisplay = () => {\n    let displayT;\n    let displayA;\n\n    if (state.userView) {\n      displayT = state.transactions.filter(trans => trans.user.username === state.userView);\n    } else {\n      displayT = state.transactions;\n    }\n\n    return {\n      transactions: displayT,\n      accounts: displayA\n    };\n  };\n\n  switch (action.type) {\n    case 'storeData':\n      // action.data = {transacton: [{trans}, {trans} ... ]}, accounts: [{acc}, {acc} ...]}\n      // would be nice to sort transactions by date\n      return { ...state,\n        transactions: action.data.transactions,\n        accounts: action.data.accounts\n      };\n\n    case 'addData':\n      return { ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts]\n      };\n\n    case 'storeMonth':\n      return { ...state,\n        monthTransactions: action.transactions.transactions\n      };\n\n    case 'setUserVew':\n      debugger; // why doesnt this get hit \n\n      let username;\n\n      switch (action.filter) {\n        case \"user1\":\n          username = state.accounts.users[0].username;\n          break;\n\n        case 'user2':\n          username = state.accounts.users[1].username;\n          break;\n\n        default:\n          // if it is both, userView is null\n          username = null;\n      }\n\n      return { ...state,\n        userView: username\n      };\n\n    case \"resetApp\":\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/linkReducer.js"],"names":["initialState","transactions","accounts","monthTransactions","displayTransactions","displayAccounts","userView","linkReducer","state","action","handleDisplay","displayT","displayA","filter","trans","user","username","type","data","users"],"mappings":"AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,iBAAiB,EAAE,EAHA;AAKnBC,EAAAA,mBAAmB,EAAE,EALF;AAMnBC,EAAAA,eAAe,EAAE,EANE;AAQnBC,EAAAA,QAAQ,EAAE;AARS,CAArB;AAWA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAACR,YAA3B,EAAyCS,MAAzC,EAAgD;AAE7D,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIC,QAAJ;AACA,QAAIC,QAAJ;;AACA,QAAIJ,KAAK,CAACF,QAAV,EAAmB;AACjBK,MAAAA,QAAQ,GAAGH,KAAK,CAACP,YAAN,CAAmBY,MAAnB,CAA0BC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,QAAX,KAAwBR,KAAK,CAACF,QAAjE,CAAX;AACD,KAFD,MAEO;AACLK,MAAAA,QAAQ,GAAGH,KAAK,CAACP,YAAjB;AACD;;AACD,WAAM;AAACA,MAAAA,YAAY,EAAEU,QAAf;AAAyBT,MAAAA,QAAQ,EAAEU;AAAnC,KAAN;AACD,GATD;;AAWA,UAAOH,MAAM,CAACQ,IAAd;AACE,SAAK,WAAL;AAAkB;AAClB;AACE,aAAM,EACJ,GAAGT,KADC;AAEJP,QAAAA,YAAY,EAAEQ,MAAM,CAACS,IAAP,CAAYjB,YAFtB;AAGJC,QAAAA,QAAQ,EAAEO,MAAM,CAACS,IAAP,CAAYhB;AAHlB,OAAN;;AAKF,SAAK,SAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELP,QAAAA,YAAY,EAAE,CAAC,GAAGO,KAAK,CAACP,YAAV,EAAwB,GAAGQ,MAAM,CAACS,IAAP,CAAYjB,YAAvC,CAFT;AAGLC,QAAAA,QAAQ,EAAE,CAAC,GAAGM,KAAK,CAACN,QAAV,EAAoB,GAAGO,MAAM,CAACS,IAAP,CAAYhB,QAAnC;AAHL,OAAP;;AAKF,SAAK,YAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELL,QAAAA,iBAAiB,EAAEM,MAAM,CAACR,YAAP,CAAoBA;AAFlC,OAAP;;AAIF,SAAK,YAAL;AACE,eADF,CACW;;AACT,UAAIe,QAAJ;;AACA,cAAQP,MAAM,CAACI,MAAf;AACE,aAAK,OAAL;AACEG,UAAAA,QAAQ,GAAGR,KAAK,CAACN,QAAN,CAAeiB,KAAf,CAAqB,CAArB,EAAwBH,QAAnC;AACA;;AACF,aAAK,OAAL;AACEA,UAAAA,QAAQ,GAAGR,KAAK,CAACN,QAAN,CAAeiB,KAAf,CAAqB,CAArB,EAAwBH,QAAnC;AACA;;AACF;AAAS;AACPA,UAAAA,QAAQ,GAAG,IAAX;AARJ;;AAUA,aAAO,EACL,GAAGR,KADE;AAELF,QAAAA,QAAQ,EAAEU;AAFL,OAAP;;AAIF,SAAK,UAAL;AACE,aAAOhB,YAAP;;AACF;AAAS;AACP,eAAOQ,KAAP;AACD;AAxCH;AA6CD","sourcesContent":["\nconst initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n\n  displayTransactions: [],\n  displayAccounts: [],\n\n  userView: null\n}\n\nexport default function linkReducer(state=initialState, action){\n\n  const handleDisplay = () => {\n    let displayT\n    let displayA\n    if (state.userView){\n      displayT = state.transactions.filter(trans => trans.user.username === state.userView)\n    } else {\n      displayT = state.transactions\n    }\n    return{transactions: displayT, accounts: displayA}\n  }\n\n  switch(action.type){\n    case 'storeData': // action.data = {transacton: [{trans}, {trans} ... ]}, accounts: [{acc}, {acc} ...]}\n    // would be nice to sort transactions by date\n      return{\n        ...state,\n        transactions: action.data.transactions,\n        accounts: action.data.accounts,\n      }\n    case 'addData':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts],\n      }\n    case 'storeMonth':\n      return {\n        ...state,\n        monthTransactions: action.transactions.transactions\n      }\n    case 'setUserVew':\n      debugger // why doesnt this get hit \n      let username\n      switch (action.filter){\n        case \"user1\":\n          username = state.accounts.users[0].username\n          break \n        case 'user2': \n          username = state.accounts.users[1].username\n          break\n        default: // if it is both, userView is null\n          username = null\n      }\n      return {\n        ...state,\n        userView: username,\n      }\n    case \"resetApp\":\n      return initialState;\n    default: {\n      return state\n    }\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}