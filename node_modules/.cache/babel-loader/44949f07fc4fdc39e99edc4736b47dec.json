{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/MonthChart.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { Doughnut, Pie } from 'react-chartjs-2';\n\nconst MonthChart = props => {\n  // i just want to pass it different props \n  // console.log(props.transactions)\n  let today = new Date();\n  let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let currentMonth = month[today.getMonth()]; //  how to represent money out > money in\n  // GAUGE CHART \n\n  let moneyIn = props.transactions.reduce((acc, i) => {\n    if (i.amount < 0) {\n      //  \"transaction with a negative amount represents money flowing into the account\"\n      return -i.amount + acc;\n    } else {\n      return acc;\n    }\n  }, 0);\n  let moneyOut = props.transactions.reduce((acc, i) => {\n    if (i.amount > 0) {\n      return acc + i.amount;\n    } else {\n      return acc;\n    }\n  }, 0);\n  let moneyLeft = moneyIn - moneyOut;\n  let values = [moneyIn, moneyOut, moneyLeft];\n\n  const norm = arr => {\n    // arr = [in, out, left]\n    debugger;\n    let min = arr.slice().sort((a, b) => a < b ? -1 : 1).shift();\n    let positive = arr.map(x => x - min);\n    let max = positive.slice().sort((a, b) => a < b ? -1 : 1).pop();\n    let norm = positive.map(x => x / max);\n    norm = [...norm, norm[1] - norm[2]];\n    console.log(\"norm\", norm);\n    return norm;\n  };\n\n  const data = {\n    labels: ['money in', 'money out', 'money left', 'money negative'],\n    datasets: [{\n      label: 'out',\n      backgroundColor: ['#B21F00', '#175000'],\n      // data: [null, moneyOut, moneyIn-moneyOut], // what if that net is negative. weird it still graphs it like its positive \n      data: [null, norm(values)[1], null, null, norm(values)[2]],\n      borderWidth: 0\n    }, {\n      label: 'in',\n      backgroundColor: ['#B21F00'],\n      // data: [moneyIn],\n      data: [norm(values)[0], norm(values)[3]],\n      borderWidth: 0\n    }]\n  };\n  const options = {\n    title: {\n      display: true,\n      text: currentMonth,\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: 'right'\n    },\n    rotation: 1 * Math.PI,\n    circumference: 1 * Math.PI,\n    maintainAspectRatio: false\n  }; // CATEGORY CHART\n  // would be cool if click each category, it filters trans by that category\n\n  let eachCategory = props.transactions.map(transaction => transaction.category[0]);\n  let distinctCategories = [...new Set(eachCategory)];\n  let amounts = distinctCategories.map(category => props.transactions.reduce((acc, i) => {\n    if (i.category[0] === category) {\n      return acc + i.amount;\n    } else {\n      return acc;\n    }\n  }, 0));\n  const piedata = {\n    labels: distinctCategories,\n    datasets: [{\n      label: 'out',\n      backgroundColor: ['#d8ea7c', '#93172a', '#2f00a8', '#3cef07', '#97d817', '#5aefcf', '#af09fd', '#751b74', '#3e6764', '#631a7c', '#af5e55', '#c2443d'],\n      data: amounts,\n      borderWidth: 0\n    }]\n  };\n  const pieoptions = {\n    title: {\n      display: true,\n      text: currentMonth,\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: 'right'\n    },\n    rotation: 1 * Math.PI,\n    circumference: 2 * Math.PI,\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Doughnut, {\n    data: data,\n    options: options,\n    width: 300,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    transactions: state.linkReducer.monthTransactions\n  };\n};\n\nconst mapDispacthToProps = dispatch => {\n  return {\n    dispatch // inc: (() => dispatc({type: \"inc\"}))\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispacthToProps)(MonthChart);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/MonthChart.js"],"names":["React","connect","Doughnut","Pie","MonthChart","props","today","Date","month","currentMonth","getMonth","moneyIn","transactions","reduce","acc","i","amount","moneyOut","moneyLeft","values","norm","arr","min","slice","sort","a","b","shift","positive","map","x","max","pop","console","log","data","labels","datasets","label","backgroundColor","borderWidth","options","title","display","text","fontSize","legend","position","rotation","Math","PI","circumference","maintainAspectRatio","eachCategory","transaction","category","distinctCategories","Set","amounts","piedata","pieoptions","mapStateToProps","state","linkReducer","monthTransactions","mapDispacthToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux'\nimport { Doughnut, Pie } from 'react-chartjs-2'\n\nconst MonthChart = (props) => { // i just want to pass it different props \n  // console.log(props.transactions)\n  let today = new Date\n  let month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n  let currentMonth = month[today.getMonth()]\n\n\n  //  how to represent money out > money in\n  // GAUGE CHART \n\n  let moneyIn = props.transactions.reduce( (acc, i) => {\n    if (i.amount < 0 ){ //  \"transaction with a negative amount represents money flowing into the account\"\n      return (-i.amount + acc)\n    } else { \n      return acc\n    }\n  }, 0)\n\n  let moneyOut = props.transactions.reduce ( (acc, i) => {\n    if(i.amount > 0){\n      return(acc + i.amount)\n    } else { \n      return acc\n    }\n  }, 0)\n\n  let moneyLeft = moneyIn - moneyOut\n  let values = [moneyIn, moneyOut, moneyLeft]\n\n  const norm = (arr) => {\n    // arr = [in, out, left]\n    debugger\n    let min = arr.slice().sort((a, b) => a < b ? -1 : 1).shift()\n    let positive = arr.map(x => x - min)\n    let max = positive.slice().sort((a, b) => a < b ? -1 : 1).pop()\n    let norm = positive.map(x => x/max)\n    norm = [...norm, norm[1]-norm[2]]\n    console.log(\"norm\", norm)\n    return norm\n  }\n\n  const data = {\n    labels: ['money in', 'money out', 'money left', 'money negative'],\n    datasets: [\n      {\n        label: 'out',\n        backgroundColor: ['#B21F00', '#175000'],\n        // data: [null, moneyOut, moneyIn-moneyOut], // what if that net is negative. weird it still graphs it like its positive \n        data: [null, norm(values)[1], null, null, norm(values)[2]],\n        borderWidth: 0\n      },\n      {\n        label: 'in',\n        backgroundColor: ['#B21F00'],\n        // data: [moneyIn],\n        data: [norm(values)[0], norm(values)[3]],\n        borderWidth: 0\n      }\n    ]\n  }\n\n  const options = {\n    title:{\n      display:true,\n      text: currentMonth,\n      fontSize:20\n    },\n    legend:{\n      display:true,\n      position:'right'\n    },\n    rotation: 1 * Math.PI, \n    circumference: 1 * Math.PI ,\n    maintainAspectRatio: false\n  }\n\n  // CATEGORY CHART\n  // would be cool if click each category, it filters trans by that category\n  let eachCategory = props.transactions.map(transaction => transaction.category[0])\n  let distinctCategories = [...new Set(eachCategory)]\n  let amounts = distinctCategories.map(category => \n    props.transactions.reduce((acc, i) => {\n      if(i.category[0] === category){\n        return (acc + i.amount)\n      } else { \n        return acc\n      }\n    }, 0)\n  )\n\n  const piedata = {\n    labels: distinctCategories,\n    datasets: [\n      {\n        label: 'out',\n        backgroundColor: ['#d8ea7c', '#93172a', '#2f00a8', '#3cef07', '#97d817', '#5aefcf', '#af09fd', '#751b74', '#3e6764', '#631a7c', '#af5e55', '#c2443d'],\n        data: amounts,\n        borderWidth: 0\n      },\n    ]\n  }\n\n  const pieoptions = {\n    title:{\n      display:true,\n      text: currentMonth,\n      fontSize:20\n    },\n    legend:{\n      display:true,\n      position:'right'\n    },\n    rotation: 1 * Math.PI, \n    circumference: 2 * Math.PI ,\n    maintainAspectRatio: false\n  }\n\n  return (\n    <div>\n      {/* <div style={{\"float\": \"top\"}}> */}\n        <Doughnut data={data} options={options} width={300} height={300} />\n      {/* </div> */}\n      {/* <div style={{\"float\": \"bottom\"}}> */}\n        {/* <Pie data={piedata} options={pieoptions} width={200} height={100} /> */}\n      {/* </div> */}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    transactions: state.linkReducer.monthTransactions\n  }\n}\n\nconst mapDispacthToProps = (dispatch) => {\n  return {\n    dispatch\n    // inc: (() => dispatc({type: \"inc\"}))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(MonthChart)"]},"metadata":{},"sourceType":"module"}