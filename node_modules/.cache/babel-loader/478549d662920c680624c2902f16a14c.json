{"ast":null,"code":"const initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n  transactionsDisplay: [],\n  accountsDisplay: [],\n  userView: null,\n  typeView: null,\n  accountView: null\n};\nexport default function linkReducer(state = initialState, action) {\n  const handleTransactionsDisplay = transactions => {\n    // transactionsT = state.transactions\n    if (state.userView) {\n      transactions = transactions.filter(items => items.user.username === state.userView);\n    } else if (state.accountView) {\n      transactions = transactions.filter(items => items.account_id === state.accountView);\n    } else if (state.typeView) {// uh oh transactions dont have a account type indication\n    }\n\n    return transactions;\n  };\n\n  const handleAccountsDisplay = accounts => {\n    if (state.userView) {\n      accounts = accounts.filter(account => account.user.username === state.userView);\n    } else if (state.typeView) {\n      // account types can be \"depository\" \"investment\" \"credit\" \"loan\"\n      if (state.typeView === \"debt\") {\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\");\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView);\n      }\n    }\n\n    return accounts;\n  };\n\n  switch (action.type) {\n    case 'storeData':\n      // action.data = {transacton: [{trans}, {trans} ... ]}, accounts: [{acc}, {acc} ...]}\n      // would be nice to sort transactions by date\n      let transactions = action.data.transactions.sort((trans1, trans2) => trans1.date > trans2.date ? -1 : 1);\n      return { ...state,\n        transactions: transactions,\n        transactionsDisplay: transactions,\n        accounts: action.data.accounts,\n        accountsDisplay: action.data.accounts\n      };\n\n    case 'addData':\n      return { ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts]\n      };\n\n    case 'storeMonth':\n      return { ...state,\n        monthTransactions: action.transactions.transactions\n      };\n\n    case 'setUserView':\n      return { ...state,\n        userView: action.username\n      };\n\n    case \"setTypeView\":\n      let typeView = action.filter;\n\n      if (typeView === state.typeView) {\n        typeView = null;\n      } // toggle\n\n\n      return { ...state,\n        typeView: typeView\n      };\n\n    case \"setAccountView\":\n      let accountView = action.filter;\n\n      if (accountView === state.accountView) {\n        accountView = null;\n      } // toggle\n\n\n      return { ...state,\n        accountView: accountView\n      };\n\n    case \"handleDisplay\":\n      return { ...state,\n        transactionsDisplay: handleTransactionsDisplay(state.transactions),\n        accountsDisplay: handleAccountsDisplay(state.accounts)\n      };\n\n    case \"resetApp\":\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/linkReducer.js"],"names":["initialState","transactions","accounts","monthTransactions","transactionsDisplay","accountsDisplay","userView","typeView","accountView","linkReducer","state","action","handleTransactionsDisplay","filter","items","user","username","account_id","handleAccountsDisplay","account","type","data","sort","trans1","trans2","date"],"mappings":"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","sourcesContent":["\nconst initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n\n  transactionsDisplay: [],\n  accountsDisplay: [],\n\n  userView: null,\n  typeView: null,\n  accountView: null\n}\n\nexport default function linkReducer(state=initialState, action){\n\n  const handleTransactionsDisplay = (transactions) => {\n    // transactionsT = state.transactions\n    if (state.userView){\n      transactions = transactions.filter(items => items.user.username === state.userView)\n    } else if (state.accountView){\n      transactions = transactions.filter(items => items.account_id === state.accountView)\n    } else if (state.typeView){\n      // uh oh transactions dont have a account type indication\n    }\n    return transactions \n  }\n  const handleAccountsDisplay = (accounts) => {\n    if (state.userView){\n      accounts = accounts.filter(account => account.user.username === state.userView)\n    } else if (state.typeView){\n      // account types can be \"depository\" \"investment\" \"credit\" \"loan\"\n      if (state.typeView === \"debt\"){\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\")\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView)\n      }\n    }\n    return accounts \n  }\n\n\n  switch(action.type){\n\n    case 'storeData': // action.data = {transacton: [{trans}, {trans} ... ]}, accounts: [{acc}, {acc} ...]}\n    // would be nice to sort transactions by date\n    let transactions = action.data.transactions.sort( (trans1, trans2) => trans1.date > trans2.date ? -1 : 1 )\n      return{\n        ...state,\n        transactions: transactions,\n        transactionsDisplay: transactions,\n        accounts: action.data.accounts,\n        accountsDisplay: action.data.accounts,\n      }\n\n    case 'addData':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts],\n      }\n\n    case 'storeMonth':\n      return {\n        ...state,\n        monthTransactions: action.transactions.transactions\n      }\n\n    case 'setUserView': \n      return {\n        ...state,\n        userView: action.username,\n      }\n\n    case \"setTypeView\": \n      let typeView = action.filter\n      if (typeView === state.typeView){typeView = null}  // toggle\n      return {\n        ...state,\n        typeView: typeView\n      }\n\n    case \"setAccountView\": \n      let accountView = action.filter\n      if (accountView === state.accountView){accountView = null} // toggle\n      return {\n        ...state,\n        accountView: accountView\n      }\n\n    case \"handleDisplay\":\n      return{\n        ...state,\n        transactionsDisplay: handleTransactionsDisplay(state.transactions),\n        accountsDisplay: handleAccountsDisplay(state.accounts),\n      }\n    case \"resetApp\":\n      return initialState;\n\n    default: {\n      return state\n    }\n\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}