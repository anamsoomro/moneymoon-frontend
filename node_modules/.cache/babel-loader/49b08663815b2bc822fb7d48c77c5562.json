{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/LineChart.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { Line } from 'react-chartjs-2';\n\nconst LineChart = props => {\n  // i just want to pass it different props \n  let today = new Date();\n  let month = [\"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\"];\n  let lastSix = month.slice(today.getMonth() + 6 - 6, today.getMonth() + 6);\n  let nextSix = month.slice(today.getMonth() + 6, today.getMonth() + 6 + 6);\n  let savings = [65, 66, 69, 69, 70, 70]; // this needs to be for savings, debt, investments\n  // y − y1 = m(x − x1)\n  // mMonth = 1 / change in saving in one month\n  // m = average all the mMonth's\n  // projected = [ m*1, m*2, m*3, m*4, m*5, m*6]\n  // oh this same as doing m over six months\n\n  let mSixMonths = (savings[5] - savings[0]) / 6;\n  let projected = [];\n  let x;\n\n  for (x = 0; x < 7; x++) {\n    // y = mx + b\n    projected.push(savings[5] + x * mSixMonths);\n  }\n\n  const data = {\n    labels: [...lastSix, ...nextSix],\n    datasets: [{\n      label: 'Savings',\n      fill: false,\n      backgroundColor: 'rgb(51, 153, 102)',\n      borderColor: 'rgb(51, 153, 102)',\n      borderWidth: 2,\n      data: [...savings],\n      lineTension: 0\n    }, {\n      label: 'Savings Projected',\n      fill: false,\n      backgroundColor: 'rgb(51, 0, 102)',\n      borderColor: 'rgb(51, 0, 102)',\n      borderWidth: 2,\n      data: [null, null, null, null, null, null, ...projected],\n      lineTension: 0\n    }, {\n      label: 'Debt',\n      fill: false,\n      backgroundColor: 'rgb(102, 153, 255)',\n      borderColor: 'rgb(102, 153, 255)',\n      borderWidth: 2,\n      data: [67, 64, 62, 60, 58, 23, 45, 56, 67, 78, 23, 34],\n      lineTension: 0\n    }, {\n      label: 'Investments',\n      fill: false,\n      backgroundColor: 'rgb(230, 184, 0)',\n      borderColor: 'rgb(230, 184, 0)',\n      borderWidth: 2,\n      data: [12, 15, 17, 12, 12, 13, 12, 27, 12, 12, 23, 12],\n      lineTension: 0\n    }]\n  };\n  const options = {\n    title: {\n      display: true,\n      text: \"trends\",\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: 'right'\n    },\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: options,\n    width: 200,\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    transactions: state.linkReducer.monthTransactions\n  };\n};\n\nconst mapDispacthToProps = dispatch => {\n  return {\n    dispatch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispacthToProps)(LineChart);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/LineChart.js"],"names":["React","connect","Line","LineChart","props","today","Date","month","lastSix","slice","getMonth","nextSix","savings","mSixMonths","projected","x","push","data","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","lineTension","options","title","display","text","fontSize","legend","position","maintainAspectRatio","mapStateToProps","state","transactions","linkReducer","monthTransactions","mapDispacthToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux'\nimport {Line} from 'react-chartjs-2'\n\nconst LineChart = (props) => { // i just want to pass it different props \n\n  let today = new Date\n  let month = [ \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\"]\n  let lastSix = month.slice( today.getMonth() + 6 - 6 , today.getMonth() + 6)\n  let nextSix = month.slice( today.getMonth() + 6, today.getMonth() + 6 + 6)  \n  let savings = [65, 66, 69, 69, 70, 70] // this needs to be for savings, debt, investments\n  // y − y1 = m(x − x1)\n  // mMonth = 1 / change in saving in one month\n  // m = average all the mMonth's\n  // projected = [ m*1, m*2, m*3, m*4, m*5, m*6]\n  // oh this same as doing m over six months\n  let mSixMonths = (savings[5] - savings[0]) / 6\n  let projected = []\n  let x\n  for (x = 0; x < 7; x++) {\n    // y = mx + b\n    projected.push(savings[5] + x * mSixMonths)\n  }\n  \n  const data = {\n    labels: [...lastSix, ...nextSix],\n    datasets: [\n      {\n        label: 'Savings',\n        fill: false,\n        backgroundColor: 'rgb(51, 153, 102)',\n        borderColor: 'rgb(51, 153, 102)',\n        borderWidth: 2,\n        data: [...savings],\n        lineTension: 0\n      }, \n      {\n        label: 'Savings Projected',\n        fill: false,\n        backgroundColor: 'rgb(51, 0, 102)',\n        borderColor: 'rgb(51, 0, 102)',\n        borderWidth: 2,\n        data: [null,null,null,null,null,null, ...projected],\n        lineTension: 0\n      }, \n\n      {\n        label: 'Debt',\n        fill: false,\n        backgroundColor: 'rgb(102, 153, 255)',\n        borderColor: 'rgb(102, 153, 255)',\n        borderWidth: 2,\n        data: [67, 64, 62, 60, 58, 23, 45, 56, 67, 78, 23, 34],\n        lineTension: 0\n\n      }, \n      {\n        label: 'Investments',\n        fill: false,\n        backgroundColor: 'rgb(230, 184, 0)',\n        borderColor: 'rgb(230, 184, 0)',\n        borderWidth: 2,\n        data: [12, 15, 17, 12, 12, 13, 12, 27, 12, 12, 23, 12],\n        lineTension: 0\n\n      }, \n\n    ]\n  }\n\n  const options = {\n    title:{\n      display:true,\n      text: \"trends\",\n      fontSize:20\n    },\n    legend:{\n      display:true,\n      position:'right'\n    },\n    maintainAspectRatio: false\n  }\n\n  return (\n    <div>\n    <Line data={data} options={options} width={200} height={400} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    transactions: state.linkReducer.monthTransactions\n  }\n}\n\nconst mapDispacthToProps = (dispatch) => {\n  return {\n    dispatch\n  }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(LineChart)"]},"metadata":{},"sourceType":"module"}