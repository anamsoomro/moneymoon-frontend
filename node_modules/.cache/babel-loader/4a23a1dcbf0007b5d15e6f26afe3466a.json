{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/App.js\";\n// import React from \"react\";\nimport React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Link from \"./components/Link\";\nimport Dash from \"./containers/Dash\";\nimport Welcome from \"./containers/Welcome\";\nimport Month from \"./containers/Month\";\nimport Trends from \"./containers/Trends\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NavBar from \"./components/NavBar\";\n\nfunction App(props) {\n  useEffect(() => {\n    if (localStorage.token) {\n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(data => {\n        if (!!data.transactions.length) {\n          // if user has no plaid items {trans: [], accounts: []}\n          // for as many items this acount has. each object in array is a link item\n          let allAccounts = [];\n          data.accounts.map(item => item.map(account => allAccounts.push(account)));\n          let allTransactions = [];\n          data.transactions.map(item => item.map(transaction => allTransactions.push(transaction))); // accounts have account_ids and names \n          // transactions have account_ids, need to add account_names\n\n          allTransactions = allTransactions.map(tran => {\n            let account = allAccounts.filter(acc => {\n              return acc.account_id === tran.account_id;\n            });\n            return { ...tran,\n              account_name: account[0].name\n            };\n          }); // grab the ones for the month for month page\n\n          let today = new Date();\n          let month = today.getMonth() + 1;\n          let monthTransactions = allTransactions.filter(transaction => parseInt(transaction.date.slice(5, 7)) === month);\n          props.storeMonth({\n            transactions: monthTransactions\n          });\n          props.storeData({\n            transactions: allTransactions,\n            accounts: allAccounts\n          });\n        }\n      });\n    }\n  }, []); // second argument only runs it if state is diff. can specify certain states\n\n  const renderRoutes = () => {\n    if (props.user.id) {\n      // if refresh page, then logout. doesnt redirect to login page\n      // if(localStorage.token){ // without using props.user, app does not get re rendered\n      return /*#__PURE__*/React.createElement(BrowserRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(NavBar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Link, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: routerProps => /*#__PURE__*/React.createElement(Dash, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 65\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: routerProps => /*#__PURE__*/React.createElement(Dash, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 65\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/month\",\n        render: routerProps => /*#__PURE__*/React.createElement(Month, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 70\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/trends\",\n        render: routerProps => /*#__PURE__*/React.createElement(Trends, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 71\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(Welcome, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, renderRoutes());\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.authReducer.user,\n    account_id: state.authReducer.account.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    storeData: data => dispatch({\n      type: \"storeData\",\n      data: data\n    }),\n    // data = {transactions: [...], accounts: [...]}\n    storeMonth: transactions => dispatch({\n      type: \"storeMonth\",\n      transactions: transactions\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/App.js"],"names":["React","useEffect","Link","Dash","Welcome","Month","Trends","BrowserRouter","Route","Switch","connect","NavBar","App","props","localStorage","token","fetch","account_id","method","headers","Authorization","then","resp","json","data","transactions","length","allAccounts","accounts","map","item","account","push","allTransactions","transaction","tran","filter","acc","account_name","name","today","Date","month","getMonth","monthTransactions","parseInt","date","slice","storeMonth","storeData","renderRoutes","user","id","routerProps","mapStateToProps","state","authReducer","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["\n// import React from \"react\";\nimport React, { useEffect } from \"react\"\nimport \"./App.css\";\nimport Link from \"./components/Link\";\nimport Dash from \"./containers/Dash\"\nimport Welcome from \"./containers/Welcome\"\nimport Month from \"./containers/Month\"\nimport Trends from \"./containers/Trends\"\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport NavBar from \"./components/NavBar\";\n\n\nfunction App(props) {\n\n  useEffect( () =>{\n    if (localStorage.token){ \n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\", \n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        if (!!data.transactions.length){ // if user has no plaid items {trans: [], accounts: []}\n          // for as many items this acount has. each object in array is a link item\n          let allAccounts = []\n          data.accounts.map( item => item.map(account => allAccounts.push(account)))\n          let allTransactions = [] \n          data.transactions.map( item => item.map(transaction => allTransactions.push(transaction)))\n\n          // accounts have account_ids and names \n          // transactions have account_ids, need to add account_names\n          allTransactions = allTransactions.map(tran =>{\n            let account = allAccounts.filter(acc => {\n              return acc.account_id === tran.account_id\n            })\n            return {...tran, account_name: account[0].name}\n          })\n\n          // grab the ones for the month for month page\n          let today = new Date\n          let month = today.getMonth() + 1\n          let monthTransactions = allTransactions.filter(transaction => \n            parseInt(transaction.date.slice(5, 7)) === month\n          )\n          props.storeMonth({transactions: monthTransactions})\n          props.storeData({transactions: allTransactions, accounts: allAccounts})\n        }\n      })\n    }\n  }, []) // second argument only runs it if state is diff. can specify certain states\n\n\n  const renderRoutes = () => {\n    if(props.user.id){ // if refresh page, then logout. doesnt redirect to login page\n    // if(localStorage.token){ // without using props.user, app does not get re rendered\n      return(\n          <BrowserRouter>\n              <NavBar />\n              <Link />\n              <Switch>\n                <Route exact path=\"/\" render={ (routerProps) => <Dash {...routerProps} /> } />\n                <Route exact path=\"/\" render={ (routerProps) => <Dash {...routerProps} /> } />\n                <Route exact path=\"/month\" render={ (routerProps) => <Month {...routerProps}/> } />\n                <Route exact path=\"/trends\" render={ (routerProps) => <Trends {...routerProps}/> } />\n              </Switch>\n          </BrowserRouter>\n      )\n    } else { \n      return (\n          <Welcome />\n      )\n    }\n  }\n\n  return (\n    <div>\n      {renderRoutes()}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.authReducer.user,\n    account_id: state.authReducer.account.id\n\n  }\n} \n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: ( (data) => dispatch({type: \"storeData\", data: data}) ), // data = {transactions: [...], accounts: [...]}\n    storeMonth: ( (transactions) => dispatch({type: \"storeMonth\", transactions: transactions}))\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)"]},"metadata":{},"sourceType":"module"}