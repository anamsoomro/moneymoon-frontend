{"ast":null,"code":"// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\nconst initialState = {\n  savings: savingSeed,\n  debt: debtSeed,\n  investments: investmentSeed,\n  overall: overallSeed,\n  mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n  mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n  mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n  mOverall: (overallSeed[5] - overallSeed[0]) / 5\n};\nexport default function trendReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'adjustSavings':\n      let a = action.mSavings + state.mInvestment - state.mDebt;\n      console.log(a);\n      return { ...state,\n        mSaving: action.mSavings,\n        mOverall: a\n      };\n\n    case 'adjustDebt':\n      let b = state.mSaving + state.mInvestment - action.mDebt;\n      console.log(b);\n      return { ...state,\n        mDebt: action.mDebt,\n        mOverall: b\n      };\n\n    case \"resetTrends\":\n      console.log(initialState);\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/trendReducer.js"],"names":["initialState","savings","savingSeed","debt","debtSeed","investments","investmentSeed","overall","overallSeed","mSaving","mDebt","mInvestment","mOverall","trendReducer","state","action","type","a","mSavings","console","log","b"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAEC,UADU;AAEnBC,EAAAA,IAAI,EAAEC,QAFa;AAGnBC,EAAAA,WAAW,EAAEC,cAHM;AAInBC,EAAAA,OAAO,EAAEC,WAJU;AAMnBC,EAAAA,OAAO,EAAE,CAACP,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAA3B,IAAkC,CANxB;AAOnBQ,EAAAA,KAAK,EAAE,CAACN,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAvB,IAA8B,CAPlB;AAQnBO,EAAAA,WAAW,EAAE,CAACL,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAnC,IAA0C,CARpC;AASnBM,EAAAA,QAAQ,EAAE,CAACJ,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAA7B,IAAoC;AAT3B,CAArB;AAaA,eAAe,SAASK,YAAT,CAAuBC,KAAK,GAACd,YAA7B,EAA2Ce,MAA3C,EAAkD;AAC/D,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,eAAL;AACE,UAAIC,CAAC,GAAIF,MAAM,CAACG,QAAP,GAAkBJ,KAAK,CAACH,WAAxB,GAAsCG,KAAK,CAACJ,KAArD;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACA,aAAM,EACJ,GAAGH,KADC;AAEJL,QAAAA,OAAO,EAAEM,MAAM,CAACG,QAFZ;AAGJN,QAAAA,QAAQ,EAAEK;AAHN,OAAN;;AAKF,SAAK,YAAL;AACE,UAAII,CAAC,GAAGP,KAAK,CAACL,OAAN,GAAgBK,KAAK,CAACH,WAAtB,GAAoCI,MAAM,CAACL,KAAnD;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACA,aAAM,EACJ,GAAGP,KADC;AAEJJ,QAAAA,KAAK,EAAEK,MAAM,CAACL,KAFV;AAGJE,QAAAA,QAAQ,EAAES;AAHN,OAAN;;AAKF,SAAK,aAAL;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAYpB,YAAZ;AACA,aAAOA,YAAP;;AACF;AAAS;AACP,eAAOc,KAAP;AACD;AAtBH;AAwBD","sourcesContent":["\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n\nconst initialState = {\n  savings: savingSeed,\n  debt: debtSeed,\n  investments: investmentSeed,\n  overall: overallSeed,\n  \n  mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n  mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n  mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n  mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n}\n\n\nexport default function trendReducer (state=initialState, action){\n  switch(action.type){\n    case 'adjustSavings':\n      let a  = action.mSavings + state.mInvestment - state.mDebt\n      console.log(a)\n      return{ \n        ...state,\n        mSaving: action.mSavings,\n        mOverall: a\n      }\n    case 'adjustDebt':\n      let b = state.mSaving + state.mInvestment - action.mDebt\n      console.log(b)\n      return{ \n        ...state,\n        mDebt: action.mDebt,\n        mOverall: b\n      }\n    case \"resetTrends\":\n      console.log(initialState)\n      return initialState\n    default: {\n      return state\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}