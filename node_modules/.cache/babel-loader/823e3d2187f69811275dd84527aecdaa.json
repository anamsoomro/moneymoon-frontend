{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/App.js\";\nimport React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Dash from \"./containers/Dash\";\nimport Welcome from \"./containers/Welcome\";\nimport Month from \"./containers/Month\";\nimport Trends from \"./containers/Trends\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NavBar from \"./components/NavBar\";\nimport { trackPromise } from 'react-promise-tracker';\nimport Settings from './containers/Settings';\n\nfunction App(props) {\n  useEffect(() => {\n    if (localStorage.token) {\n      trackPromise(fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(data => {\n        debugger;\n\n        if (!!data.transactions.length) {\n          // if user has no plaid items {trans: [], accounts: []}\n          // for as many items this acount has. each object in array is a link item\n          // let allAccounts = []\n          let allAccounts = data.accounts[0]; // data.accounts.map( item => item.map(account => allAccounts.push(account))) // this is mapping over repeat\n          // let allTransactions = [] \n\n          let allTransactions = data.transactions[0];\n          data.transactions.map(item => item.map(transaction => allTransactions.push(transaction))); // this is mapping over repeat \n          // accounts have account_ids and names \n          // transactions have account_ids, need to add account_names\n\n          allTransactions = allTransactions.map(tran => {\n            let account = allAccounts.filter(acc => {\n              // this seems expensive way of doing this. no .select\n              return acc.account_id === tran.account_id; // find the account matchinig this transaction\n            });\n            return { ...tran,\n              account_name: account[0].name\n            }; // return transaction with that accounts name\n          });\n          props.storeData({\n            transactions: allTransactions,\n            accounts: allAccounts\n          });\n          props.handleDisplay();\n        }\n      }));\n    }\n  }, [props.user]); // run if props.user changes\n\n  const renderRoutes = () => {\n    if (props.user.id) {\n      return /*#__PURE__*/React.createElement(BrowserRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(NavBar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: routerProps => /*#__PURE__*/React.createElement(Dash, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 63\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/month\",\n        render: routerProps => /*#__PURE__*/React.createElement(Month, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 68\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/trends\",\n        render: routerProps => /*#__PURE__*/React.createElement(Trends, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 69\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/settings\",\n        render: routerProps => /*#__PURE__*/React.createElement(Settings, Object.assign({}, routerProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 71\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(Welcome, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, renderRoutes());\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.authReducer.user,\n    account_id: state.authReducer.account.id,\n    accounts: state.linkReducer.accounts\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    storeData: data => dispatch({\n      type: \"storeData\",\n      data: data\n    }),\n    // data = {transactions: [...], accounts: [...]}\n    handleDisplay: () => dispatch({\n      type: \"handleDisplay\"\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/App.js"],"names":["React","useEffect","Dash","Welcome","Month","Trends","BrowserRouter","Route","Switch","connect","NavBar","trackPromise","Settings","App","props","localStorage","token","fetch","account_id","method","headers","Authorization","then","resp","json","data","transactions","length","allAccounts","accounts","allTransactions","map","item","transaction","push","tran","account","filter","acc","account_name","name","storeData","handleDisplay","user","renderRoutes","id","routerProps","mapStateToProps","state","authReducer","linkReducer","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["\nimport React, { useEffect } from \"react\"\nimport \"./App.css\";\nimport Dash from \"./containers/Dash\"\nimport Welcome from \"./containers/Welcome\"\nimport Month from \"./containers/Month\"\nimport Trends from \"./containers/Trends\"\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {connect} from 'react-redux'\nimport NavBar from \"./components/NavBar\";\nimport { trackPromise } from 'react-promise-tracker'\nimport Settings from './containers/Settings'\n\n\nfunction App(props) {\n\n  useEffect( () =>{\n    if (localStorage.token){ \n      trackPromise(\n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\", \n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        debugger\n        if (!!data.transactions.length){ // if user has no plaid items {trans: [], accounts: []}\n          // for as many items this acount has. each object in array is a link item\n          // let allAccounts = []\n          let allAccounts = data.accounts[0]\n\n          // data.accounts.map( item => item.map(account => allAccounts.push(account))) // this is mapping over repeat\n          // let allTransactions = [] \n          let allTransactions = data.transactions[0] \n\n          data.transactions.map( item => item.map(transaction => allTransactions.push(transaction))) // this is mapping over repeat \n          // accounts have account_ids and names \n          // transactions have account_ids, need to add account_names\n          allTransactions = allTransactions.map(tran =>{\n            let account = allAccounts.filter(acc => { // this seems expensive way of doing this. no .select\n              return acc.account_id === tran.account_id // find the account matchinig this transaction\n            })\n            return {...tran, account_name: account[0].name} // return transaction with that accounts name\n          })\n          props.storeData({transactions: allTransactions, accounts: allAccounts})\n          props.handleDisplay()\n        }\n      })\n      )\n    }\n  }, [props.user]) // run if props.user changes\n\n\n  const renderRoutes = () => {\n    if(props.user.id){ \n      return(\n        <BrowserRouter>\n          <NavBar />\n            <Switch>\n              <Route exact path=\"/\" render={ (routerProps) => <Dash {...routerProps} /> } />\n              <Route exact path=\"/month\" render={ (routerProps) => <Month {...routerProps}/> } />\n              <Route exact path=\"/trends\" render={ (routerProps) => <Trends {...routerProps}/> } />\n              <Route exact path=\"/settings\" render={ (routerProps) => <Settings {...routerProps}/> } />\n\n            </Switch>\n        </BrowserRouter>  \n      )\n    } else { \n      return (\n          <Welcome />\n      )\n    }\n  }\n\n  return (\n    <div>\n      {renderRoutes()}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.authReducer.user,\n    account_id: state.authReducer.account.id,\n    accounts: state.linkReducer.accounts\n  }\n} \n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: ( (data) => dispatch({type: \"storeData\", data: data}) ), // data = {transactions: [...], accounts: [...]}\n    handleDisplay: ( () => dispatch({type: \"handleDisplay\"}))\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)"]},"metadata":{},"sourceType":"module"}