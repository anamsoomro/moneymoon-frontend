{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/containers/Dash.js\";\nimport React, { useEffect } from \"react\";\nimport AccountsPanel from './AccountsPanel';\nimport TransactionsPanel from '../components/TransactionPanel';\nimport BalancePanel from './BalancePanel';\nimport { connect } from 'react-redux';\n\nconst Dash = props => {\n  // useEffect( () =>{\n  //   if (localStorage.token){ \n  //     fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n  //       method: \"GET\", \n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${localStorage.token}`\n  //       }\n  //     })\n  //     .then(resp => resp.json())\n  //     .then(data => {\n  //       if (!!data.transactions.length){ // if user has no plaid items {trans: [], accounts: []}\n  //         // for as many items this acount has. each object in array is a link item\n  //         let allAccounts = []\n  //         data.accounts.map( item => item.map(account => allAccounts.push(account)))\n  //         let allTransactions = [] \n  //         data.transactions.map( item => item.map(transaction => allTransactions.push(transaction)))\n  //         // accounts have account_ids and names \n  //         // transactions have account_ids, need to add account_names\n  //         allTransactions = allTransactions.map(tran =>{\n  //           let account = allAccounts.filter(acc => {\n  //             return acc.account_id === tran.account_id\n  //           })\n  //           return {...tran, account_name: account[0].name}\n  //         })\n  //         // grab the ones for the month for month page\n  //         let today = new Date\n  //         let month = today.getMonth() + 1\n  //         let monthTransactions = allTransactions.filter(transaction => \n  //           parseInt(transaction.date.slice(5, 7)) === month\n  //         )\n  //         props.storeMonth({transactions: monthTransactions})\n  //         props.storeData({transactions: allTransactions, accounts: allAccounts})\n  //       }\n  //     })\n  //   }\n  // }, []) // second argument only runs it if state is diff. can specify certain states\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BalancePanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountsPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TransactionsPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    account_id: state.authReducer.account.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    storeData: data => dispatch({\n      type: \"storeData\",\n      data: data\n    }),\n    // data = {transactions: [...], accounts: [...]}\n    storeMonth: transactions => dispatch({\n      type: \"storeMonth\",\n      transactions: transactions\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dash);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/containers/Dash.js"],"names":["React","useEffect","AccountsPanel","TransactionsPanel","BalancePanel","connect","Dash","props","mapStateToProps","state","account_id","authReducer","account","id","mapDispatchToProps","dispatch","storeData","data","type","storeMonth","transactions"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAjDD;;AAmDA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,UAAU,EAAED,KAAK,CAACE,WAAN,CAAkBC,OAAlB,CAA0BC;AADjC,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,SAAS,EAAKC,IAAD,IAAUF,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE,WAAP;AAAoBD,MAAAA,IAAI,EAAEA;AAA1B,KAAD,CAD1B;AAC+D;AACpEE,IAAAA,UAAU,EAAKC,YAAD,IAAkBL,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAE,YAAP;AAAqBE,MAAAA,YAAY,EAAEA;AAAnC,KAAD;AAFnC,GAAP;AAID,CALD;;AAOA,eAAef,OAAO,CAACG,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CR,IAA7C,CAAf","sourcesContent":["\nimport React, { useEffect } from \"react\"\nimport AccountsPanel from './AccountsPanel'\nimport TransactionsPanel from '../components/TransactionPanel'\nimport BalancePanel from './BalancePanel'\nimport {connect} from 'react-redux'\n\nconst Dash = (props) => {\n\n  // useEffect( () =>{\n  //   if (localStorage.token){ \n  //     fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n  //       method: \"GET\", \n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         Authorization: `Bearer ${localStorage.token}`\n  //       }\n  //     })\n  //     .then(resp => resp.json())\n  //     .then(data => {\n  //       if (!!data.transactions.length){ // if user has no plaid items {trans: [], accounts: []}\n  //         // for as many items this acount has. each object in array is a link item\n  //         let allAccounts = []\n  //         data.accounts.map( item => item.map(account => allAccounts.push(account)))\n  //         let allTransactions = [] \n  //         data.transactions.map( item => item.map(transaction => allTransactions.push(transaction)))\n\n  //         // accounts have account_ids and names \n  //         // transactions have account_ids, need to add account_names\n  //         allTransactions = allTransactions.map(tran =>{\n  //           let account = allAccounts.filter(acc => {\n  //             return acc.account_id === tran.account_id\n  //           })\n  //           return {...tran, account_name: account[0].name}\n  //         })\n\n  //         // grab the ones for the month for month page\n  //         let today = new Date\n  //         let month = today.getMonth() + 1\n  //         let monthTransactions = allTransactions.filter(transaction => \n  //           parseInt(transaction.date.slice(5, 7)) === month\n  //         )\n  //         props.storeMonth({transactions: monthTransactions})\n  //         props.storeData({transactions: allTransactions, accounts: allAccounts})\n  //       }\n  //     })\n  //   }\n  // }, []) // second argument only runs it if state is diff. can specify certain states\n\n  return (\n    <div className=\"dash\"> \n      <BalancePanel /> \n      <AccountsPanel /> \n      <TransactionsPanel /> \n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return { \n    account_id: state.authReducer.account.id\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: ( (data) => dispatch({type: \"storeData\", data: data}) ), // data = {transactions: [...], accounts: [...]}\n    storeMonth: ( (transactions) => dispatch({type: \"storeMonth\", transactions: transactions}))\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dash);\n\n\n"]},"metadata":{},"sourceType":"module"}