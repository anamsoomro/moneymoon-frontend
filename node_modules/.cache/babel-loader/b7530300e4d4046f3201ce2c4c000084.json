{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/LineChart.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { Line } from 'react-chartjs-2';\n\nconst LineChart = props => {\n  // i just want to pass it different props \n  let today = new Date();\n  let month = [\"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\"];\n  let lastSix = month.slice(today.getMonth() + 6 - 6, today.getMonth() + 6);\n  let nextSix = month.slice(today.getMonth() + 6, today.getMonth() + 6 + 6); // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n  // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n  // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n  // let overallSeed = []\n  // for (let i = 0; i < savingSeed.length; i++){\n  //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n  // }\n\n  const project = (arr, m) => {\n    let projected = [];\n    let x;\n\n    for (x = 0; x < 7; x++) {\n      projected.push(arr[5] + x * m);\n    }\n\n    return projected;\n  };\n\n  const depository = [{\n    label: 'Savings',\n    fill: false,\n    backgroundColor: 'rgb(51, 153, 102)',\n    borderColor: 'rgb(51, 153, 102)',\n    borderWidth: 2,\n    data: [...props.savings],\n    lineTension: 0\n  }, {\n    label: 'Savings Projected',\n    fill: false,\n    backgroundColor: '#808080',\n    borderColor: '#808080',\n    borderWidth: 2,\n    data: [null, null, null, null, null, ...project(props.savings, props.mSaving)],\n    lineTension: 0\n  }];\n  const debt = [{\n    label: 'Debt',\n    fill: false,\n    backgroundColor: 'rgb(102, 153, 255)',\n    borderColor: 'rgb(102, 153, 255)',\n    borderWidth: 2,\n    data: [...props.debtSeed],\n    lineTension: 0\n  }, {\n    label: 'Debt Projected',\n    fill: false,\n    backgroundColor: '#808080',\n    borderColor: '#808080',\n    borderWidth: 2,\n    data: [null, null, null, null, null, ...project(props.debtSeed, props.mDebt)],\n    lineTension: 0\n  }];\n  const investment = [{\n    label: 'Investments',\n    fill: false,\n    backgroundColor: 'rgb(230, 184, 0)',\n    borderColor: 'rgb(230, 184, 0)',\n    borderWidth: 2,\n    data: [...props.investmentSeed],\n    lineTension: 0\n  }, {\n    label: 'Investments Projected',\n    fill: false,\n    backgroundColor: '#808080',\n    borderColor: '#808080',\n    borderWidth: 2,\n    data: [null, null, null, null, null, ...project(props.investmentSeed, props.mInvestment)],\n    lineTension: 0\n  }];\n  const overall = [{\n    label: 'Overall',\n    fill: false,\n    backgroundColor: '\t#B22222',\n    borderColor: '\t#B22222',\n    borderWidth: 2,\n    data: [...props.overallSeed],\n    lineTension: 0\n  }, {\n    label: 'Overall Projected',\n    fill: false,\n    backgroundColor: '#808080',\n    borderColor: '#808080',\n    borderWidth: 2,\n    data: [null, null, null, null, null, ...project(props.overallSeed, props.mOverall)],\n    lineTension: 0\n  }];\n\n  const displayData = () => {\n    switch (props.filter) {\n      case \"depository\":\n        return depository;\n\n      case \"investment\":\n        return investment;\n\n      case \"debt\":\n        return debt;\n\n      case \"overall\":\n        return overall;\n\n      default:\n        return [...depository, ...investment, ...debt, ...overall];\n    }\n  };\n\n  const data = {\n    labels: [...lastSix, ...nextSix],\n    datasets: displayData()\n  };\n  const options = {\n    title: {\n      display: true,\n      text: \"trends\",\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: 'right'\n    },\n    elements: {\n      point: {\n        radius: 0.5\n      }\n    },\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: options,\n    width: 200,\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    transactions: state.linkReducer.monthTransactions,\n    filter: state.linkReducer.typeView,\n    savings: state.trendReducer.savings,\n    debt: state.trendReducer.debt,\n    investments: state.trendReducer.investments,\n    mSaving: state.trendReducer.savings,\n    mInvestment: state.trendReducer.investment,\n    mOverall: state.trendReducer.mOverall\n  };\n};\n\nconst mapDispacthToProps = dispatch => {\n  return {\n    dispatch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispacthToProps)(LineChart);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/LineChart.js"],"names":["React","connect","Line","LineChart","props","today","Date","month","lastSix","slice","getMonth","nextSix","project","arr","m","projected","x","push","depository","label","fill","backgroundColor","borderColor","borderWidth","data","savings","lineTension","mSaving","debt","debtSeed","mDebt","investment","investmentSeed","mInvestment","overall","overallSeed","mOverall","displayData","filter","labels","datasets","options","title","display","text","fontSize","legend","position","elements","point","radius","maintainAspectRatio","mapStateToProps","state","transactions","linkReducer","monthTransactions","typeView","trendReducer","investments","mapDispacthToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux'\nimport {Line} from 'react-chartjs-2'\n\nconst LineChart = (props) => { // i just want to pass it different props \n\n  let today = new Date\n  let month = [ \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\"]\n  let lastSix = month.slice( today.getMonth() + 6 - 6 , today.getMonth() + 6)\n  let nextSix = month.slice( today.getMonth() + 6, today.getMonth() + 6 + 6)  \n\n  // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n  // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n  // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n  // let overallSeed = []\n  // for (let i = 0; i < savingSeed.length; i++){\n  //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n  // }\n\n  const project = (arr, m) => {\n    let projected = []\n    let x\n    for (x =0; x < 7; x++) { \n      projected.push(arr[5] + x * m)\n    }\n    return projected\n  }\n\n  const depository = [\n    {label: 'Savings',\n     fill: false,\n     backgroundColor: 'rgb(51, 153, 102)',\n     borderColor: 'rgb(51, 153, 102)',\n     borderWidth: 2,\n     data: [...props.savings],\n     lineTension: 0}, \n    {label: 'Savings Projected',\n     fill: false,\n     backgroundColor: '#808080',\n     borderColor: '#808080',\n     borderWidth: 2,\n     data: [null,null,null,null,null, ...project(props.savings, props.mSaving)],\n     lineTension: 0}\n  ]\n\n  const debt = [\n    {label: 'Debt',\n     fill: false,\n     backgroundColor: 'rgb(102, 153, 255)',\n     borderColor: 'rgb(102, 153, 255)',\n     borderWidth: 2,\n     data: [...props.debtSeed],\n     lineTension: 0}, \n    {label: 'Debt Projected',\n     fill: false,\n     backgroundColor: '#808080',\n     borderColor: '#808080',\n     borderWidth: 2,\n     data: [null,null,null,null,null, ...project(props.debtSeed, props.mDebt)],\n     lineTension: 0}\n  ]\n\n  const investment = [\n    {label: 'Investments',\n     fill: false,\n     backgroundColor: 'rgb(230, 184, 0)',\n     borderColor: 'rgb(230, 184, 0)',\n     borderWidth: 2,\n     data: [...props.investmentSeed],\n     lineTension: 0}, \n    {label: 'Investments Projected',\n     fill: false,\n     backgroundColor: '#808080',\n     borderColor: '#808080',\n     borderWidth: 2,\n     data: [null,null,null,null,null, ...project(props.investmentSeed, props.mInvestment)],\n     lineTension: 0}\n  ]\n\n  const overall = [\n    {label: 'Overall',\n     fill: false,\n     backgroundColor: '\t#B22222',\n     borderColor: '\t#B22222',\n     borderWidth: 2,\n     data: [...props.overallSeed],\n     lineTension: 0}, \n    {label: 'Overall Projected',\n     fill: false,\n     backgroundColor: '#808080',\n     borderColor: '#808080',\n     borderWidth: 2,\n     data: [null,null,null,null,null, ...project(props.overallSeed, props.mOverall)],\n     lineTension: 0}\n  ]\n\n\n\n  const displayData = () => {\n    switch(props.filter){\n      case \"depository\":\n        return depository\n      case \"investment\":\n        return investment\n      case \"debt\":\n        return debt\n      case \"overall\":\n        return overall\n      default: \n        return [...depository, ...investment, ...debt, ...overall]\n    }\n  }\n\n  \n  const data = {\n    labels: [...lastSix, ...nextSix],\n    datasets: displayData()\n  }\n\n  const options = {\n    title:{\n      display:true,\n      text: \"trends\",\n      fontSize:20\n    },\n    legend:{\n      display:true,\n      position:'right'\n    },\n    elements: {\n      point:{radius: 0.5}\n    },\n    maintainAspectRatio: false\n  }\n\n  return (\n    <div>\n      <Line data={data} options={options} width={200} height={400} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    transactions: state.linkReducer.monthTransactions,\n    filter: state.linkReducer.typeView,\n    savings: state.trendReducer.savings,\n    debt: state.trendReducer.debt,\n    investments: state.trendReducer.investments,\n    mSaving: state.trendReducer.savings,\n    mInvestment: state.trendReducer.investment,\n    mOverall: state.trendReducer.mOverall\n  }\n}\n\nconst mapDispacthToProps = (dispatch) => {\n  return {\n    dispatch\n  }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(LineChart)"]},"metadata":{},"sourceType":"module"}