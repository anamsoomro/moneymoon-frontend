{"ast":null,"code":"// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n// MAKE USER1\nlet u1Saving = [2000, 2200, 2400, 2600, 2600, 2650];\nlet u1Debt = [10000, 9500, 9000, 8500, 8000, 7500];\nlet u1Investment = [4000, 4100, 3900, 3700, 3750, 3800];\nlet u1Overall = [];\n\nfor (let i = 0; i < u1Saving.length; i++) {\n  u1Overall.push(u1Saving[i] + u1Investment[i] - u1Debt[i]);\n}\n\nlet user1 = {\n  saving: u1Saving,\n  debt: u1Debt,\n  investment: u1Investment,\n  overall: u1Overall,\n  mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n  mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n  mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n  mOverall: (u1Overall[5] - u1Overall[0]) / 5\n}; // MAKE USER2\n\nlet u2Saving = [2000, 2200, 2400, 2600, 2600, 2650];\nlet u2Debt = [10000, 9500, 9000, 8500, 8000, 7500];\nlet u2Investment = [4000, 4100, 3900, 3700, 3750, 3800];\nlet u2Overall = [];\n\nfor (let i = 0; i < u2Saving.length; i++) {\n  u2Overall.push(u2Saving[i] + u2Investment[i] - u2Debt[i]);\n}\n\nlet user2 = {\n  saving: u2Saving,\n  debt: u2Debt,\n  investment: u2Investment,\n  overall: u2Overall,\n  mSaving: (u2Saving[5] - u2Saving[0]) / 5,\n  mDebt: (u2Debt[5] - u2Debt[0]) / 5,\n  mInvestment: (u2Investment[5] - u2Investment[0]) / 5,\n  mOverall: (u2Overall[5] - u2Overall[0]) / 5\n};\nconst initialState = {\n  user1: user1,\n  user2: user2,\n  both: null,\n  display: null // either u1, u2 or both\n\n};\n\nconst addTwoArrays = (arr1, arr2) => {\n  let result = [];\n\n  for (let i = 0; i < arr1.length; i++) {\n    result.push(arr1[i] + arr2[i]);\n  }\n\n  return result;\n};\n\nexport default function trendReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'storeHistory':\n      console.log(\"storeHistory\");\n      let both = null; // this is only part where both gets assigned, y is it getting reassigned\n\n      if (action.user2) {\n        both = {\n          saving: addTwoArrays(action.user1.saving, action.user2.saving),\n          debt: addTwoArrays(action.user1.debt, action.user2.debt),\n          investment: addTwoArrays(action.user1.investment, action.user2.investment),\n          overall: addTwoArrays(action.user1.overall, action.user2.overall),\n          mSaving: action.user1.mSaving + action.user2.mSaving,\n          mDebt: action.user1.mDebt + action.user2.mDebt,\n          mInvestment: action.user1.mInvestment + action.user2.mInvestment,\n          mOverall: action.user1.mOverall + action.user2.mOverall\n        };\n      }\n\n      return { ...state,\n        user1: action.user1,\n        user2: action.user2,\n        both: both,\n        display: both\n      };\n\n    case 'handleTrendDisplay':\n      console.log(\"state of both at dispatch being called\", state.both.saving);\n      let display;\n\n      if (action.userView === localStorage.user1) {\n        display = state.user1;\n      } else if (localStorage.user2 && action.userView === localStorage.user2) {\n        display = state.user2;\n      } else {\n        display = state.both;\n      }\n\n      console.log(\"setting display to\", display);\n      return { ...state,\n        display: display\n      };\n\n    case 'adjustSavings':\n      let a = action.mSavings + state.display.mInvestment - state.display.mDebt;\n      return { ...state,\n        display: { ...state.display,\n          mSaving: action.mSavings,\n          mOverall: a\n        }\n      };\n\n    case 'adjustDebt':\n      let b = state.display.mSaving + state.display.mInvestment - action.mDebt;\n      return { ...state,\n        display: { ...state.display,\n          mDebt: action.mDebt,\n          mOverall: b\n        }\n      };\n\n    case \"resetTrends\":\n      let reset;\n\n      if (action.userView === localStorage.user1) {\n        reset = state.user1;\n      } else if (localStorage.user2 && action.userView === localStorage.user2) {\n        reset = state.user2;\n      } else {\n        reset = state.both;\n      }\n\n      return { ...state,\n        display: reset\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/trendReducer.js"],"names":["u1Saving","u1Debt","u1Investment","u1Overall","i","length","push","user1","saving","debt","investment","overall","mSaving","mDebt","mInvestment","mOverall","u2Saving","u2Debt","u2Investment","u2Overall","user2","initialState","both","display","addTwoArrays","arr1","arr2","result","trendReducer","state","action","type","console","log","userView","localStorage","a","mSavings","b","reset"],"mappings":"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","sourcesContent":["\n// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n  \n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n\n\n\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n\n\n\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n// MAKE USER1\nlet u1Saving = [2000, 2200, 2400, 2600, 2600, 2650]\nlet u1Debt = [10000, 9500, 9000, 8500, 8000, 7500] \nlet u1Investment = [4000, 4100, 3900, 3700, 3750, 3800] \nlet u1Overall = []\nfor (let i = 0; i < u1Saving.length; i++){\n  u1Overall.push( u1Saving[i] + u1Investment[i] - u1Debt[i] )\n}\nlet user1 = {\n  saving: u1Saving, \n  debt: u1Debt, \n  investment: u1Investment, \n  overall: u1Overall,\n  mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n  mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n  mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n  mOverall: (u1Overall[5] - u1Overall[0]) / 5,\n}\n\n// MAKE USER2\nlet u2Saving = [2000, 2200, 2400, 2600, 2600, 2650]\nlet u2Debt = [10000, 9500, 9000, 8500, 8000, 7500] \nlet u2Investment = [4000, 4100, 3900, 3700, 3750, 3800] \nlet u2Overall = []\nfor (let i = 0; i < u2Saving.length; i++){\n  u2Overall.push( u2Saving[i] + u2Investment[i] - u2Debt[i] )\n}\nlet user2 = {\n  saving: u2Saving, \n  debt: u2Debt, \n  investment: u2Investment, \n  overall: u2Overall,\n  mSaving: (u2Saving[5] - u2Saving[0]) / 5,\n  mDebt: (u2Debt[5] - u2Debt[0]) / 5,\n  mInvestment: (u2Investment[5] - u2Investment[0]) / 5,\n  mOverall: (u2Overall[5] - u2Overall[0]) / 5,\n}\n\n\n\nconst initialState = {\n    user1: user1,\n    user2: user2, \n    both: null,\n    display: null // either u1, u2 or both\n}\n\nconst addTwoArrays = (arr1, arr2) => {\n  let result = []\n  for (let i=0; i<arr1.length; i++){\n    result.push(arr1[i] + arr2[i])\n  }\n  return result\n}\n\n\n\nexport default function trendReducer (state=initialState, action){\n\n  switch(action.type){\n\n    case 'storeHistory':\n      console.log(\"storeHistory\")\n      let both = null // this is only part where both gets assigned, y is it getting reassigned\n      if(action.user2){\n        both = {\n          saving: addTwoArrays(action.user1.saving, action.user2.saving), \n          debt: addTwoArrays(action.user1.debt, action.user2.debt),\n          investment: addTwoArrays(action.user1.investment, action.user2.investment),\n          overall: addTwoArrays(action.user1.overall, action.user2.overall),\n          mSaving: action.user1.mSaving + action.user2.mSaving,\n          mDebt: action.user1.mDebt + action.user2.mDebt,\n          mInvestment: action.user1.mInvestment + action.user2.mInvestment,\n          mOverall: action.user1.mOverall + action.user2.mOverall,\n        }\n      }\n      return {\n        ...state,\n        user1: action.user1,\n        user2: action.user2,\n        both: both, \n        display: both\n      }\n    \n    case 'handleTrendDisplay': \n    console.log(\"state of both at dispatch being called\", state.both.saving)\n      let display\n      if (action.userView === localStorage.user1 ){\n        display = state.user1\n      } else if (localStorage.user2 && action.userView === localStorage.user2 ){\n        display = state.user2\n      } else {\n        display = state.both\n      }\n    console.log(\"setting display to\", display)\n      return {\n        ...state,\n        display: display \n      }\n\n    case 'adjustSavings':\n      let a  = action.mSavings + state.display.mInvestment - state.display.mDebt\n      return{ \n        ...state,\n        display:{\n          ...state.display,\n          mSaving: action.mSavings,\n          mOverall: a\n        }\n      }\n    case 'adjustDebt':\n      let b = state.display.mSaving + state.display.mInvestment - action.mDebt\n      return{ \n        ...state,\n        display:{\n          ...state.display,\n          mDebt: action.mDebt,\n          mOverall: b\n        }\n      }\n    case \"resetTrends\":\n      let reset\n      if (action.userView === localStorage.user1 ){reset = state.user1}\n      else if (localStorage.user2 && action.userView === localStorage.user2 ){reset = state.user2}\n      else {reset = state.both}\n      return {\n        ...state,\n        display: reset\n      }\n    default: {\n      return state\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}