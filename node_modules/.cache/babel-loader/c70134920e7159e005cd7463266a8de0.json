{"ast":null,"code":"const initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n  transactionsDisplay: [],\n  accountsDisplay: [],\n  userView: null,\n  typeView: null,\n  accountView: null,\n  monthView: today.getMonth() + 1\n};\nexport default function linkReducer(state = initialState, action) {\n  const handleAccountsDisplay = accounts => {\n    if (state.userView) {\n      accounts = accounts.filter(account => account.user.username === state.userView);\n    }\n\n    if (state.typeView) {\n      if (state.typeView === \"debt\") {\n        // credit and loan\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\");\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView); // investment or depository\n      }\n    }\n\n    accounts = accounts.sort((acc1, acc2) => acc1.type > acc2.type ? 1 : -1);\n    return accounts;\n  };\n\n  const handleTransactionsDisplay = (transactions, accounts) => {\n    if (state.typeView) {\n      //  accountsDisplay will already be filtered to account types selected and whatever else is set \n      let account_ids = accounts.map(account => account.account_id); // [account_ids]\n\n      transactions = transactions.filter(transaction => account_ids.includes(transaction.account_id));\n    }\n\n    if (state.userView) {\n      transactions = transactions.filter(transaction => transaction.user.username === state.userView);\n    }\n\n    if (state.accountView) {\n      transactions = transactions.filter(transaction => transaction.account_id === state.accountView);\n    }\n\n    transactions = transactions.sort((trans1, trans2) => trans1.date > trans2.date ? -1 : 1);\n    return transactions;\n  };\n\n  const handleMonthDisplay = transactions => {\n    if (state.userView) {\n      transactions = transactions.filter(items => items.user.username === state.userView);\n    }\n\n    transactions = transactions.sort((trans1, trans2) => trans1.date > trans2.date ? -1 : 1);\n    return transactions;\n  };\n\n  switch (action.type) {\n    case 'storeData':\n      return { ...state,\n        transactions: action.data.transactions,\n        accounts: action.data.accounts\n      };\n\n    case 'addData':\n      return { ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts]\n      };\n\n    case 'setUserView':\n      return { ...state,\n        userView: action.username,\n        accountView: null // dont hold on to account filter\n\n      };\n\n    case \"setTypeView\":\n      let typeView = action.filter;\n\n      if (typeView === state.typeView) {\n        typeView = null;\n      } // toggle\n\n\n      return { ...state,\n        typeView: typeView,\n        accountView: null // dont hold on to account filter\n\n      };\n\n    case \"setAccountView\":\n      let accountView = action.filter;\n\n      if (accountView === state.accountView) {\n        accountView = null;\n      } // toggle\n\n\n      return { ...state,\n        accountView: accountView\n      };\n\n    case \"removeBank\":\n      let accounts = state.accounts.filter(account => account.item_id !== action.item_id); // this is returning back everything\n\n      let transactions = state.transactions.filter(transaction => transaction.item_id !== action.item_id);\n      return { ...state,\n        accounts: accounts,\n        transactions: transactions\n      };\n\n    case \"handleDisplay\":\n      // texpensive to do everytime for what. maybe have month separate and just update it\n      let today = new Date();\n      let month = today.getMonth() + 1;\n      let monthTransactions = state.transactions.filter(transaction => parseInt(transaction.date.slice(5, 7)) === month);\n      let accountsDisplay = handleAccountsDisplay(state.accounts);\n      let transactionsDisplay = handleTransactionsDisplay(state.transactions, accountsDisplay); // i need to pass accounts to filter tran by typeView\n\n      console.log(\"accounts\", accountsDisplay);\n      console.log(\"transactions\", transactionsDisplay);\n      return { ...state,\n        transactionsDisplay: transactionsDisplay,\n        accountsDisplay: accountsDisplay,\n        monthTransactions: handleMonthDisplay(monthTransactions)\n      };\n\n    case \"storeMonth\":\n      return { ...state,\n        monthTransactions: action.transactions\n      };\n\n    case \"resetLink\":\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/linkReducer.js"],"names":["initialState","transactions","accounts","monthTransactions","transactionsDisplay","accountsDisplay","userView","typeView","accountView","monthView","today","getMonth","linkReducer","state","action","handleAccountsDisplay","filter","account","user","username","type","sort","acc1","acc2","handleTransactionsDisplay","account_ids","map","account_id","transaction","includes","trans1","trans2","date","handleMonthDisplay","items","data","item_id","Date","month","parseInt","slice","console","log"],"mappings":"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","sourcesContent":["const initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n\n  transactionsDisplay: [],\n  accountsDisplay: [],\n\n  userView: null,\n  typeView: null,\n  accountView: null,\n  monthView: today.getMonth() + 1\n}\n\nexport default function linkReducer(state=initialState, action){\n\n  const handleAccountsDisplay = (accounts) => {\n    if (state.userView){\n      accounts = accounts.filter(account => account.user.username === state.userView)\n    } \n    if (state.typeView){\n      if (state.typeView === \"debt\"){ // credit and loan\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\")\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView) // investment or depository\n      }\n    }\n    accounts = accounts.sort( (acc1, acc2) => acc1.type > acc2.type ? 1 : -1 )\n    return accounts \n  }\n\n  const handleTransactionsDisplay = (transactions, accounts) => {\n    if (state.typeView){ //  accountsDisplay will already be filtered to account types selected and whatever else is set \n      let account_ids = accounts.map(account => account.account_id) // [account_ids]\n      transactions = transactions.filter(transaction => account_ids.includes(transaction.account_id) )\n    }\n    if (state.userView){\n      transactions = transactions.filter(transaction => transaction.user.username === state.userView)\n    } \n    if (state.accountView){\n      transactions = transactions.filter(transaction => transaction.account_id === state.accountView)\n    }\n    transactions = transactions.sort( (trans1, trans2) => trans1.date > trans2.date ? -1 : 1 )\n    return transactions \n  }\n\n  const handleMonthDisplay = (transactions) => {\n    if (state.userView){\n      transactions = transactions.filter(items => items.user.username === state.userView)\n    } \n    transactions = transactions.sort( (trans1, trans2) => trans1.date > trans2.date ? -1 : 1 )\n    return transactions\n  }\n\n  switch(action.type){\n\n    case 'storeData': \n      \n      return{\n        ...state,\n        transactions: action.data.transactions,\n        accounts: action.data.accounts,\n      }\n\n    case 'addData':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts],\n      }\n\n    case 'setUserView': \n      return {\n        ...state,\n        userView: action.username,\n        accountView: null // dont hold on to account filter\n      }\n\n    case \"setTypeView\": \n      let typeView = action.filter\n      if (typeView === state.typeView){typeView = null}  // toggle\n      return {\n        ...state,\n        typeView: typeView,\n        accountView: null // dont hold on to account filter\n      }\n\n    case \"setAccountView\": \n\n      let accountView = action.filter\n      if (accountView === state.accountView){accountView = null} // toggle\n      return {\n        ...state,\n        accountView: accountView\n      }\n    case \"removeBank\":\n      let accounts = state.accounts.filter(account => account.item_id !== action.item_id)\n      // this is returning back everything\n      let transactions = state.transactions.filter(transaction => transaction.item_id !== action.item_id)\n      return{\n        ...state,\n        accounts: accounts,\n        transactions: transactions\n      }\n\n    case \"handleDisplay\":\n      // texpensive to do everytime for what. maybe have month separate and just update it\n      let today = new Date\n      let month = today.getMonth() + 1\n      let monthTransactions = state.transactions.filter(transaction => \n        parseInt(transaction.date.slice(5, 7)) === month\n      )\n      let accountsDisplay = handleAccountsDisplay(state.accounts)\n      let transactionsDisplay = handleTransactionsDisplay(state.transactions, accountsDisplay) // i need to pass accounts to filter tran by typeView\n      console.log(\"accounts\", accountsDisplay)\n      console.log(\"transactions\", transactionsDisplay)\n      return{\n        ...state,\n        transactionsDisplay: transactionsDisplay,\n        accountsDisplay: accountsDisplay,\n        monthTransactions: handleMonthDisplay(monthTransactions) \n      }\n    case \"storeMonth\":\n      return {\n        ...state,\n        monthTransactions: action.transactions\n      }\n    case \"resetLink\":\n      return initialState;\n\n    default: {\n      return state\n    }\n\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}