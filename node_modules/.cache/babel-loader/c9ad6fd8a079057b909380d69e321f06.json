{"ast":null,"code":"// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\nconst initialState = {\n  // let user1 = {\n  //   saving: u1Saving, \n  //   debt: u1Debt, \n  //   investment: u1Investment, \n  //   overall: u1Overall,\n  //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n  //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n  //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n  //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n  // }\n  user1: null,\n  user2: null,\n  both: null,\n  display: null // either u1, u2 or both\n\n};\n\nconst addTwoArrays = (arr1, arr2) => {};\n\nexport default function trendReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'storeHistory':\n      let both = null;\n\n      if (action.user2) {\n        both = {\n          saving: action.user1.saving + action.user2.saving,\n          // array plus an array\n          debt: action.user1.debt + action.user2.debt,\n          investment: action.user1.investment + action.user2.investment,\n          overall: action.user1.overall + action.user2.overall,\n          mSaving: action.user1.mSaving + action.user2.mSaving,\n          mDebt: action.user1.mDebt + action.user2.mDebt,\n          mInvestment: action.user1.mInvestment + action.user2.mInvestment,\n          mOverall: action.user1.mOverall + action.user2.mOverall\n        };\n      }\n\n      debugger;\n      return { ...state,\n        user1: action.user1,\n        user2: action.user2,\n        both: both\n      };\n\n    case 'handleTrendDisplay':\n      let display;\n\n      if (action.userView === \"both\") {\n        display = state.both;\n      } else if (action.userView === localStorage.user1) {\n        display = state.user1;\n      } else if (localStorage.user2 && action.userView === localStorage.user2) {\n        display = state.user2;\n      }\n\n      return { ...state,\n        display: display\n      };\n    //  the below adjustments should be done on the display numbers.\n    // display.mSaving, display.mDebt, display.mOverall \n    // resetTrends should throw it back to the original data display = user1 2 or both \n    // resetTrends should just call handleTrendDisplay\n\n    case 'adjustSavings':\n      let a = action.mSavings + state.mInvestment - state.mDebt;\n      return { ...state,\n        mSaving: action.mSavings,\n        mOverall: a\n      };\n\n    case 'adjustDebt':\n      let b = state.mSaving + state.mInvestment - action.mDebt;\n      return { ...state,\n        mDebt: action.mDebt,\n        mOverall: b\n      };\n\n    case \"resetTrends\":\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/trendReducer.js"],"names":["initialState","user1","user2","both","display","addTwoArrays","arr1","arr2","trendReducer","state","action","type","saving","debt","investment","overall","mSaving","mDebt","mInvestment","mOverall","userView","localStorage","a","mSavings","b"],"mappings":"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","sourcesContent":["\n// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n  \n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n\n\n\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n\n\n\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n\nconst initialState = {\n    // let user1 = {\n    //   saving: u1Saving, \n    //   debt: u1Debt, \n    //   investment: u1Investment, \n    //   overall: u1Overall,\n    //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n    //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n    //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n    //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n    // }\n    user1: null,\n    user2: null, \n    both: null,\n    display: null // either u1, u2 or both\n}\n\nconst addTwoArrays = (arr1, arr2) => {\n\n  \n}\n\nexport default function trendReducer (state=initialState, action){\n\n  switch(action.type){\n\n\n    case 'storeHistory':\n      let both = null\n      if(action.user2){\n        both = {\n          saving: action.user1.saving + action.user2.saving, // array plus an array\n          debt: action.user1.debt + action.user2.debt,\n          investment: action.user1.investment + action.user2.investment,\n          overall: action.user1.overall + action.user2.overall,\n\n          mSaving: action.user1.mSaving + action.user2.mSaving,\n          mDebt: action.user1.mDebt + action.user2.mDebt,\n          mInvestment: action.user1.mInvestment + action.user2.mInvestment,\n          mOverall: action.user1.mOverall + action.user2.mOverall,\n      }}\n      debugger\n      return {\n        ...state,\n        user1: action.user1,\n        user2: action.user2,\n        both: both,\n      }\n    \n    case 'handleTrendDisplay': \n      let display\n      if (action.userView === \"both\"){display = state.both}\n      else if (action.userView === localStorage.user1 ){display = state.user1}\n      else if (localStorage.user2 && action.userView === localStorage.user2 ){display = state.user2}\n        return {\n          ...state,\n          display: display \n        }\n    //  the below adjustments should be done on the display numbers.\n    // display.mSaving, display.mDebt, display.mOverall \n    // resetTrends should throw it back to the original data display = user1 2 or both \n    // resetTrends should just call handleTrendDisplay\n\n    \n\n    case 'adjustSavings':\n      let a  = action.mSavings + state.mInvestment - state.mDebt\n      return{ \n        ...state,\n        mSaving: action.mSavings,\n        mOverall: a\n      }\n    case 'adjustDebt':\n      let b = state.mSaving + state.mInvestment - action.mDebt\n      return{ \n        ...state,\n        mDebt: action.mDebt,\n        mOverall: b\n      }\n    case \"resetTrends\":\n      return initialState\n    default: {\n      return state\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}