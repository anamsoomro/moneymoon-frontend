{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/containers/Dash.js\";\nimport React, { useEffect } from \"react\";\nimport AccountsPanel from './AccountsPanel';\nimport TransactionsPanel from '../components/TransactionPanel';\nimport BalancePanel from './BalancePanel';\nimport { connect } from 'react-redux';\n\nconst Dash = props => {\n  useEffect(() => {\n    if (localStorage.token) {\n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(data => {\n        if (!!data.transactions.length) {\n          // if user has no plaid items {trans: [], accounts: []}\n          // for as many items this acount has. each object in array is a link item\n          let allAccounts = [];\n          data.accounts.map(item => item.map(account => allAccounts.push(account)));\n          let allTransactions = [];\n          data.transactions.map(item => item.map(transaction => allTransactions.push(transaction))); // accounts have account_ids and names \n          // transactions have account_ids, need to add account_names\n\n          allTransactions = allTransactions.map(tran => {\n            let account = allAccounts.filter(acc => {\n              return acc.account_id === tran.account_id;\n            });\n            return { ...tran,\n              account_name: account[0].name\n            };\n          }); // grab the ones for the month for month page\n\n          let today = new Date();\n          let month = today.getMonth() + 1;\n          let monthTransactions = allTransactions.filter(transaction => parseInt(transaction.date.slice(5, 7)) === month);\n          props.storeMonth({\n            transactions: monthTransactions\n          });\n          props.storeData({\n            transactions: allTransactions,\n            accounts: allAccounts\n          });\n        }\n      });\n    }\n  }, []); // second argument only runs it if state is diff. can specify certain states\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BalancePanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AccountsPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TransactionsPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    account_id: state.authReducer.account.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    storeData: data => dispatch({\n      type: \"storeData\",\n      data: data\n    }),\n    // data = {transactions: [...], accounts: [...]}\n    storeMonth: transactions => dispatch({\n      type: \"storeMonth\",\n      transactions: transactions\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dash);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/containers/Dash.js"],"names":["React","useEffect","AccountsPanel","TransactionsPanel","BalancePanel","connect","Dash","props","localStorage","token","fetch","account_id","method","headers","Authorization","then","resp","json","data","transactions","length","allAccounts","accounts","map","item","account","push","allTransactions","transaction","tran","filter","acc","account_name","name","today","Date","month","getMonth","monthTransactions","parseInt","date","slice","storeMonth","storeData","mapStateToProps","state","authReducer","id","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["\nimport React, { useEffect } from \"react\"\nimport AccountsPanel from './AccountsPanel'\nimport TransactionsPanel from '../components/TransactionPanel'\nimport BalancePanel from './BalancePanel'\nimport {connect} from 'react-redux'\n\nconst Dash = (props) => {\n\n  useEffect( () =>{\n    if (localStorage.token){ \n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\", \n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        if (!!data.transactions.length){ // if user has no plaid items {trans: [], accounts: []}\n          // for as many items this acount has. each object in array is a link item\n          let allAccounts = []\n          data.accounts.map( item => item.map(account => allAccounts.push(account)))\n          let allTransactions = [] \n          data.transactions.map( item => item.map(transaction => allTransactions.push(transaction)))\n\n          // accounts have account_ids and names \n          // transactions have account_ids, need to add account_names\n          allTransactions = allTransactions.map(tran =>{\n            let account = allAccounts.filter(acc => {\n              return acc.account_id === tran.account_id\n            })\n            return {...tran, account_name: account[0].name}\n          })\n\n          // grab the ones for the month for month page\n          let today = new Date\n          let month = today.getMonth() + 1\n          let monthTransactions = allTransactions.filter(transaction => \n            parseInt(transaction.date.slice(5, 7)) === month\n          )\n          props.storeMonth({transactions: monthTransactions})\n          props.storeData({transactions: allTransactions, accounts: allAccounts})\n        }\n      })\n    }\n  }, []) // second argument only runs it if state is diff. can specify certain states\n\n  return (\n    <div className=\"dash\"> \n      <BalancePanel /> \n      <AccountsPanel /> \n      <TransactionsPanel /> \n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return { \n    account_id: state.authReducer.account.id\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: ( (data) => dispatch({type: \"storeData\", data: data}) ), // data = {transactions: [...], accounts: [...]}\n    storeMonth: ( (transactions) => dispatch({type: \"storeMonth\", transactions: transactions}))\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dash);\n\n\n"]},"metadata":{},"sourceType":"module"}