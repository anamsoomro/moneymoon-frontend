{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/components/LineChart.js\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { Line } from 'react-chartjs-2';\n\nconst LineChart = props => {\n  // i just want to pass it different props \n  let today = new Date();\n  let month = [\"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\"];\n  let lastSix = month.slice(today.getMonth() + 6 - 6, today.getMonth() + 6);\n  let nextSix = month.slice(today.getMonth() + 6, today.getMonth() + 6 + 6);\n  let savings = [2000, 2200, 2400, 2600, 2600, 2650]; // this needs to be actual info\n\n  let debt = [10000, 9500, 9000, 8500, 8000, 7500]; // this needs to be actual info\n\n  let investments = [4000, 4100, 3900, 3700, 3750, 3800]; // this needs to be actual info\n\n  const project = arr => {\n    // y − y1 = m(x − x1)\n    // mMonth = 1 / change in saving in one month\n    // m = average all the mMonth's\n    // projected = [ m*1, m*2, m*3, m*4, m*5, m*6]\n    // oh this same as doing m over six months\n    let mSixMonths = (arr[5] - arr[0]) / 6;\n    let projected = [];\n    let x;\n\n    for (x = 1; x < 7; x++) {\n      // 1 7 instead of 0 6 to account for current month on trend\n      // y = mx + b\n      projected.push(arr[5] + x * mSixMonths);\n    }\n\n    return projected;\n  };\n\n  const data = {\n    labels: [...lastSix, ...nextSix],\n    datasets: [{\n      label: 'Savings',\n      fill: false,\n      backgroundColor: 'rgb(51, 153, 102)',\n      borderColor: 'rgb(51, 153, 102)',\n      borderWidth: 2,\n      data: [...savings],\n      lineTension: 0\n    }, {\n      label: 'Savings Projected',\n      fill: false,\n      backgroundColor: 'rgb(51, 0, 102)',\n      borderColor: 'rgb(51, 0, 102)',\n      borderWidth: 2,\n      data: [null, null, null, null, null, null, ...project(savings)],\n      lineTension: 0\n    }, {\n      label: 'Debt',\n      fill: false,\n      backgroundColor: 'rgb(102, 153, 255)',\n      borderColor: 'rgb(102, 153, 255)',\n      borderWidth: 2,\n      data: [...debt],\n      lineTension: 0\n    }, {\n      label: 'Debt Projected',\n      fill: false,\n      backgroundColor: 'rgb(102, 0, 255)',\n      borderColor: 'rgb(102, 0, 255)',\n      borderWidth: 2,\n      data: [null, null, null, null, null, null, ...project(debt)],\n      lineTension: 0\n    }, {\n      label: 'Investments',\n      fill: false,\n      backgroundColor: 'rgb(230, 184, 0)',\n      borderColor: 'rgb(230, 184, 0)',\n      borderWidth: 2,\n      data: [...investments],\n      lineTension: 0\n    }, {\n      label: 'Investments Projected',\n      fill: false,\n      backgroundColor: 'rgb(230, 0, 0)',\n      borderColor: 'rgb(230, 0, 0)',\n      borderWidth: 2,\n      data: [null, null, null, null, null, null, ...project(investments)],\n      lineTension: 0\n    }]\n  };\n  const options = {\n    title: {\n      display: true,\n      text: \"trends\",\n      fontSize: 20\n    },\n    legend: {\n      display: true,\n      position: 'right'\n    },\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: data,\n    options: options,\n    width: 200,\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    transactions: state.linkReducer.monthTransactions\n  };\n};\n\nconst mapDispacthToProps = dispatch => {\n  return {\n    dispatch\n  };\n};\n\nexport default connect(mapStateToProps, mapDispacthToProps)(LineChart);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/components/LineChart.js"],"names":["React","connect","Line","LineChart","props","today","Date","month","lastSix","slice","getMonth","nextSix","savings","debt","investments","project","arr","mSixMonths","projected","x","push","data","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","lineTension","options","title","display","text","fontSize","legend","position","maintainAspectRatio","mapStateToProps","state","transactions","linkReducer","monthTransactions","mapDispacthToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAE;AAE7B,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,KAAK,GAAG,CAAE,MAAF,EAAU,QAAV,EAAoB,WAApB,EAAiC,SAAjC,EAA4C,UAA5C,EAAwD,UAAxD,EAAoE,SAApE,EAA+E,UAA/E,EAA2F,OAA3F,EAAoG,OAApG,EAA6G,KAA7G,EAAoH,MAApH,EAA4H,MAA5H,EAAoI,QAApI,EAA8I,WAA9I,EAA2J,SAA3J,EAAsK,UAAtK,EAAkL,UAAlL,EAA8L,SAA9L,EAAyM,UAAzM,EAAqN,OAArN,EAA8N,OAA9N,EAAuO,KAAvO,CAAZ;AACA,MAAIC,OAAO,GAAGD,KAAK,CAACE,KAAN,CAAaJ,KAAK,CAACK,QAAN,KAAmB,CAAnB,GAAuB,CAApC,EAAwCL,KAAK,CAACK,QAAN,KAAmB,CAA3D,CAAd;AACA,MAAIC,OAAO,GAAGJ,KAAK,CAACE,KAAN,CAAaJ,KAAK,CAACK,QAAN,KAAmB,CAAhC,EAAmCL,KAAK,CAACK,QAAN,KAAmB,CAAnB,GAAuB,CAA1D,CAAd;AAEA,MAAIE,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAAd,CAP2B,CAOwB;;AACnD,MAAIC,IAAI,GAAG,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CAAX,CAR2B,CAQsB;;AACjD,MAAIC,WAAW,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAAlB,CAT2B,CAS4B;;AAKvD,QAAMC,OAAO,GAAIC,GAAD,IAAS;AACvB;AACA;AACA;AACA;AACA;AACA,QAAIC,UAAU,GAAG,CAACD,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAb,IAAoB,CAArC;AACA,QAAIE,SAAS,GAAG,EAAhB;AACA,QAAIC,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AAAE;AACxB;AACAD,MAAAA,SAAS,CAACE,IAAV,CAAeJ,GAAG,CAAC,CAAD,CAAH,GAASG,CAAC,GAAGF,UAA5B;AACD;;AACD,WAAOC,SAAP;AACD,GAdD;;AAgBA,QAAMG,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,CAAC,GAAGd,OAAJ,EAAa,GAAGG,OAAhB,CADG;AAEXY,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,eAAe,EAAE,mBAHnB;AAIEC,MAAAA,WAAW,EAAE,mBAJf;AAKEC,MAAAA,WAAW,EAAE,CALf;AAMEP,MAAAA,IAAI,EAAE,CAAC,GAAGT,OAAJ,CANR;AAOEiB,MAAAA,WAAW,EAAE;AAPf,KADQ,EAUR;AACEL,MAAAA,KAAK,EAAE,mBADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,eAAe,EAAE,iBAHnB;AAIEC,MAAAA,WAAW,EAAE,iBAJf;AAKEC,MAAAA,WAAW,EAAE,CALf;AAMEP,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAAgC,GAAGN,OAAO,CAACH,OAAD,CAA1C,CANR;AAOEiB,MAAAA,WAAW,EAAE;AAPf,KAVQ,EAoBR;AACEL,MAAAA,KAAK,EAAE,MADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,eAAe,EAAE,oBAHnB;AAIEC,MAAAA,WAAW,EAAE,oBAJf;AAKEC,MAAAA,WAAW,EAAE,CALf;AAMEP,MAAAA,IAAI,EAAE,CAAC,GAAGR,IAAJ,CANR;AAQEgB,MAAAA,WAAW,EAAE;AARf,KApBQ,EA+BR;AACEL,MAAAA,KAAK,EAAE,gBADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,eAAe,EAAE,kBAHnB;AAIEC,MAAAA,WAAW,EAAE,kBAJf;AAKEC,MAAAA,WAAW,EAAE,CALf;AAMEP,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAAgC,GAAGN,OAAO,CAACF,IAAD,CAA1C,CANR;AASEgB,MAAAA,WAAW,EAAE;AATf,KA/BQ,EA2CR;AACEL,MAAAA,KAAK,EAAE,aADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,eAAe,EAAE,kBAHnB;AAIEC,MAAAA,WAAW,EAAE,kBAJf;AAKEC,MAAAA,WAAW,EAAE,CALf;AAMEP,MAAAA,IAAI,EAAE,CAAC,GAAGP,WAAJ,CANR;AAOEe,MAAAA,WAAW,EAAE;AAPf,KA3CQ,EAqDR;AACEL,MAAAA,KAAK,EAAE,uBADT;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,eAAe,EAAE,gBAHnB;AAIEC,MAAAA,WAAW,EAAE,gBAJf;AAKEC,MAAAA,WAAW,EAAE,CALf;AAMEP,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,IAAhB,EAAqB,IAArB,EAA0B,IAA1B,EAAgC,GAAGN,OAAO,CAACD,WAAD,CAA1C,CANR;AAQEe,MAAAA,WAAW,EAAE;AARf,KArDQ;AAFC,GAAb;AAsEA,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAC;AACJC,MAAAA,OAAO,EAAC,IADJ;AAEJC,MAAAA,IAAI,EAAE,QAFF;AAGJC,MAAAA,QAAQ,EAAC;AAHL,KADQ;AAMdC,IAAAA,MAAM,EAAC;AACLH,MAAAA,OAAO,EAAC,IADH;AAELI,MAAAA,QAAQ,EAAC;AAFJ,KANO;AAUdC,IAAAA,mBAAmB,EAAE;AAVP,GAAhB;AAaA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEhB,IAAZ;AAAkB,IAAA,OAAO,EAAES,OAA3B;AAAoC,IAAA,KAAK,EAAE,GAA3C;AAAgD,IAAA,MAAM,EAAE,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF;AAKD,CAtHD;;AAwHA,MAAMQ,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,YAAY,EAAED,KAAK,CAACE,WAAN,CAAkBC;AAD3B,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLA,IAAAA;AADK,GAAP;AAGD,CAJD;;AAMA,eAAe3C,OAAO,CAACqC,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CxC,SAA7C,CAAf","sourcesContent":["import React from \"react\"\nimport { connect } from 'react-redux'\nimport {Line} from 'react-chartjs-2'\n\nconst LineChart = (props) => { // i just want to pass it different props \n\n  let today = new Date\n  let month = [ \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\", \"February\", \"March\", \"April\", \"May\"]\n  let lastSix = month.slice( today.getMonth() + 6 - 6 , today.getMonth() + 6)\n  let nextSix = month.slice( today.getMonth() + 6, today.getMonth() + 6 + 6)  \n\n  let savings = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info\n  let debt = [10000, 9500, 9000, 8500, 8000, 7500] // this needs to be actual info\n  let investments = [4000, 4100, 3900, 3700, 3750, 3800] // this needs to be actual info\n\n\n  \n\n  const project = (arr) => {\n    // y − y1 = m(x − x1)\n    // mMonth = 1 / change in saving in one month\n    // m = average all the mMonth's\n    // projected = [ m*1, m*2, m*3, m*4, m*5, m*6]\n    // oh this same as doing m over six months\n    let mSixMonths = (arr[5] - arr[0]) / 6\n    let projected = []\n    let x\n    for (x = 1; x < 7; x++) { // 1 7 instead of 0 6 to account for current month on trend\n      // y = mx + b\n      projected.push(arr[5] + x * mSixMonths)\n    }\n    return projected\n  }\n  \n  const data = {\n    labels: [...lastSix, ...nextSix],\n    datasets: [\n      {\n        label: 'Savings',\n        fill: false,\n        backgroundColor: 'rgb(51, 153, 102)',\n        borderColor: 'rgb(51, 153, 102)',\n        borderWidth: 2,\n        data: [...savings],\n        lineTension: 0\n      }, \n      {\n        label: 'Savings Projected',\n        fill: false,\n        backgroundColor: 'rgb(51, 0, 102)',\n        borderColor: 'rgb(51, 0, 102)',\n        borderWidth: 2,\n        data: [null,null,null,null,null,null, ...project(savings)],\n        lineTension: 0\n      }, \n\n      {\n        label: 'Debt',\n        fill: false,\n        backgroundColor: 'rgb(102, 153, 255)',\n        borderColor: 'rgb(102, 153, 255)',\n        borderWidth: 2,\n        data: [...debt],\n\n        lineTension: 0\n\n      }, \n      {\n        label: 'Debt Projected',\n        fill: false,\n        backgroundColor: 'rgb(102, 0, 255)',\n        borderColor: 'rgb(102, 0, 255)',\n        borderWidth: 2,\n        data: [null,null,null,null,null,null, ...project(debt)],\n\n\n        lineTension: 0\n\n      }, \n      {\n        label: 'Investments',\n        fill: false,\n        backgroundColor: 'rgb(230, 184, 0)',\n        borderColor: 'rgb(230, 184, 0)',\n        borderWidth: 2,\n        data: [...investments],\n        lineTension: 0\n\n      }, \n      {\n        label: 'Investments Projected',\n        fill: false,\n        backgroundColor: 'rgb(230, 0, 0)',\n        borderColor: 'rgb(230, 0, 0)',\n        borderWidth: 2,\n        data: [null,null,null,null,null,null, ...project(investments)],\n\n        lineTension: 0\n\n      }, \n\n    ]\n  }\n\n  const options = {\n    title:{\n      display:true,\n      text: \"trends\",\n      fontSize:20\n    },\n    legend:{\n      display:true,\n      position:'right'\n    },\n    maintainAspectRatio: false\n  }\n\n  return (\n    <div>\n    <Line data={data} options={options} width={200} height={400} />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    transactions: state.linkReducer.monthTransactions\n  }\n}\n\nconst mapDispacthToProps = (dispatch) => {\n  return {\n    dispatch\n  }\n}\n\nexport default connect(mapStateToProps, mapDispacthToProps)(LineChart)"]},"metadata":{},"sourceType":"module"}