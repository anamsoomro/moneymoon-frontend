{"ast":null,"code":"// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\nconst initialState = {\n  history: {\n    // let user1 = {\n    //   saving: u1Saving, \n    //   debt: u1Debt, \n    //   investment: u1Investment, \n    //   overall: u1Overall,\n    //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n    //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n    //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n    //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n    // }\n    user1: null,\n    user2: null,\n    both: null\n  },\n  mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n  mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n  mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n  mOverall: (overallSeed[5] - overallSeed[0]) / 5\n};\nexport default function trendReducer(state = initialState, action) {\n  const handleDisplay = () => {\n    if (state.userView) {\n      accounts = accounts.filter(account => account.user.username === state.userView);\n    }\n\n    if (state.typeView) {\n      if (state.typeView === \"debt\") {\n        // credit and loan\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\");\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView); // investment or depository\n      }\n    }\n\n    accounts = accounts.sort((acc1, acc2) => acc1.type > acc2.type ? 1 : -1);\n    return accounts;\n  };\n\n  switch (action.type) {\n    case 'adjustSavings':\n      let a = action.mSavings + state.mInvestment - state.mDebt;\n      console.log(a);\n      return { ...state,\n        mSaving: action.mSavings,\n        mOverall: a\n      };\n\n    case 'adjustDebt':\n      let b = state.mSaving + state.mInvestment - action.mDebt;\n      console.log(b);\n      return { ...state,\n        mDebt: action.mDebt,\n        mOverall: b\n      };\n\n    case \"resetTrends\":\n      console.log(initialState);\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/trendReducer.js"],"names":["initialState","history","user1","user2","both","mSaving","savingSeed","mDebt","debtSeed","mInvestment","investmentSeed","mOverall","overallSeed","trendReducer","state","action","handleDisplay","userView","accounts","filter","account","user","username","typeView","type","sort","acc1","acc2","a","mSavings","console","log","b"],"mappings":"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","sourcesContent":["\n// // let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// // let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// // let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// // let overallSeed = []\n// // for (let i = 0; i < savingSeed.length; i++){\n// //   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// // }\n\n// // const initialState = {\n// //   savings: savingSeed,\n// //   debt: debtSeed,\n// //   investments: investmentSeed,\n// //   overall: overallSeed,\n  \n// //   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n// //   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n// //   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n// //   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// // }\n\n\n\n// const initialState = {\n//   history: {\n//     // let user1 = {\n//     //   saving: u1Saving, \n//     //   debt: u1Debt, \n//     //   investment: u1Investment, \n//     //   overall: u1Overall,\n//     //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n//     //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n//     //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n//     //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n//     // }\n//     user1: null,\n//     user2: null\n//   },\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n// export default function trendReducer (state=initialState, action){\n//   switch(action.type){\n//     case 'adjustSavings':\n//       let a  = action.mSavings + state.mInvestment - state.mDebt\n//       console.log(a)\n//       return{ \n//         ...state,\n//         mSaving: action.mSavings,\n//         mOverall: a\n//       }\n//     case 'adjustDebt':\n//       let b = state.mSaving + state.mInvestment - action.mDebt\n//       console.log(b)\n//       return{ \n//         ...state,\n//         mDebt: action.mDebt,\n//         mOverall: b\n//       }\n//     case \"resetTrends\":\n//       console.log(initialState)\n//       return initialState\n//     default: {\n//       return state\n//     }\n//   }\n// }\n\n\n\n// let savingSeed = [2000, 2200, 2400, 2600, 2600, 2650] // this needs to be actual info.\n// let debtSeed = [10000, 9500, 9000, 8500, 8000, 7500] // the current month will also be considered as a projected month\n// let investmentSeed = [4000, 4100, 3900, 3700, 3750, 3800] \n// let overallSeed = []\n// for (let i = 0; i < savingSeed.length; i++){\n//   overallSeed.push( savingSeed[i] + investmentSeed[i] - debtSeed[i] )\n// }\n\n// const initialState = {\n//   savings: savingSeed,\n//   debt: debtSeed,\n//   investments: investmentSeed,\n//   overall: overallSeed,\n  \n//   mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n//   mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n//   mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n//   mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n// }\n\n\n\nconst initialState = {\n  history: {\n    // let user1 = {\n    //   saving: u1Saving, \n    //   debt: u1Debt, \n    //   investment: u1Investment, \n    //   overall: u1Overall,\n    //   mSaving: (u1Saving[5] - u1Saving[0]) / 5,\n    //   mDebt: (u1Debt[5] - u1Debt[0]) / 5,\n    //   mInvestment: (u1Investment[5] - u1Investment[0]) / 5,\n    //   mOverall: (u1Seed[5] - u1Seed[0]) / 5,\n    // }\n    user1: null,\n    user2: null, \n    both: null,\n  },\n  \n  mSaving: (savingSeed[5] - savingSeed[0]) / 5,\n  mDebt: (debtSeed[5] - debtSeed[0]) / 5,\n  mInvestment: (investmentSeed[5] - investmentSeed[0]) / 5,\n  mOverall: (overallSeed[5] - overallSeed[0]) / 5,\n}\n\n\n\nexport default function trendReducer (state=initialState, action){\n\n  const handleDisplay = () => {\n    if (state.userView){\n      accounts = accounts.filter(account => account.user.username === state.userView)\n    } \n    if (state.typeView){\n      if (state.typeView === \"debt\"){ // credit and loan\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\")\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView) // investment or depository\n      }\n    }\n    accounts = accounts.sort( (acc1, acc2) => acc1.type > acc2.type ? 1 : -1 )\n    return accounts \n  }\n\n  switch(action.type){\n    case 'adjustSavings':\n      let a  = action.mSavings + state.mInvestment - state.mDebt\n      console.log(a)\n      return{ \n        ...state,\n        mSaving: action.mSavings,\n        mOverall: a\n      }\n    case 'adjustDebt':\n      let b = state.mSaving + state.mInvestment - action.mDebt\n      console.log(b)\n      return{ \n        ...state,\n        mDebt: action.mDebt,\n        mOverall: b\n      }\n    case \"resetTrends\":\n      console.log(initialState)\n      return initialState\n    default: {\n      return state\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}