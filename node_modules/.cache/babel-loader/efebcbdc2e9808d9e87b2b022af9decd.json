{"ast":null,"code":"const initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n  transactionsDisplay: [],\n  accountsDisplay: [],\n  userView: null,\n  typeView: null,\n  accountView: null\n};\nexport default function linkReducer(state = initialState, action) {\n  const handleAccountsDisplay = accounts => {\n    if (state.userView) {\n      accounts = accounts.filter(account => account.user.username === state.userView);\n    }\n\n    if (state.typeView) {\n      // account types can be \"depository\" \"investment\" \"credit\" \"loan\"\n      if (state.typeView === \"debt\") {\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\");\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView);\n      }\n    }\n\n    return accounts;\n  };\n\n  const handleTransactionsDisplay = (transactions, accountsDisplay) => {\n    if (state.userView) {\n      transactions = transactions.filter(transaction => transaction.user.username === state.userView);\n    }\n\n    if (state.accountView) {\n      transactions = transactions.filter(transaction => transaction.account_id === state.accountView);\n    }\n\n    if (state.typeView) {\n      //  accountsDisplay will already be filtered to account types selected \n      let account_ids = accountsDisplay.map(account => account.account_id); // [account_ids]\n\n      transactions = transactions.filter(transaction => account_ids.include(transaction.account_id));\n    }\n\n    return transactions;\n  };\n\n  const handleMonthDisplay = transactions => {\n    if (state.userView) {\n      transactions = transactions.filter(items => items.user.username === state.userView);\n    }\n\n    return transactions;\n  };\n\n  switch (action.type) {\n    case 'storeData':\n      let transactions = action.data.transactions.sort((trans1, trans2) => trans1.date > trans2.date ? -1 : 1);\n      return { ...state,\n        transactions: transactions,\n        accounts: action.data.accounts\n      };\n\n    case 'addData':\n      return { ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts]\n      };\n\n    case 'setUserView':\n      return { ...state,\n        userView: action.username\n      };\n\n    case \"setTypeView\":\n      let typeView = action.filter;\n\n      if (typeView === state.typeView) {\n        typeView = null;\n      } // toggle\n\n\n      return { ...state,\n        typeView: typeView\n      };\n\n    case \"setAccountView\":\n      let accountView = action.filter;\n\n      if (accountView === state.accountView) {\n        accountView = null;\n      } // toggle\n\n\n      return { ...state,\n        accountView: accountView\n      };\n\n    case \"handleDisplay\":\n      // this may be an unneccsarily expensive. but its organized ah.\n      let today = new Date();\n      let month = today.getMonth() + 1;\n      let monthTransactions = state.transactions.filter(transaction => parseInt(transaction.date.slice(5, 7)) === month);\n      let accountsDisplay = handleAccountsDisplay(state.accounts); // hm it says transactions is already declared here \n\n      let transactionsDisplay = handleTransactionsDisplay(state.transactions, accountsDisplay); // i need to pass accounts to filter tran by typeView\n\n      return { ...state,\n        transactionsDisplay: transactionsDisplay,\n        accountsDisplay: accountsDisplay,\n        monthTransactions: handleMonthDisplay(monthTransactions)\n      };\n\n    case \"resetApp\":\n      return initialState;\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/reducers/linkReducer.js"],"names":["initialState","transactions","accounts","monthTransactions","transactionsDisplay","accountsDisplay","userView","typeView","accountView","linkReducer","state","action","handleAccountsDisplay","filter","account","user","username","type","handleTransactionsDisplay","transaction","account_id","account_ids","map","include","handleMonthDisplay","items","data","sort","trans1","trans2","date","today","Date","month","getMonth","parseInt","slice"],"mappings":"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","sourcesContent":["\nconst initialState = {\n  transactions: [],\n  accounts: [],\n  monthTransactions: [],\n\n  transactionsDisplay: [],\n  accountsDisplay: [],\n\n  userView: null,\n  typeView: null,\n  accountView: null\n}\n\nexport default function linkReducer(state=initialState, action){\n\n  const handleAccountsDisplay = (accounts) => {\n    if (state.userView){\n      accounts = accounts.filter(account => account.user.username === state.userView)\n    } \n    if (state.typeView){\n      // account types can be \"depository\" \"investment\" \"credit\" \"loan\"\n      if (state.typeView === \"debt\"){\n        accounts = accounts.filter(account => account.type === \"credit\" || account.type === \"loan\")\n      } else {\n        accounts = accounts.filter(account => account.type === state.typeView)\n      }\n    }\n    return accounts \n  }\n\n  const handleTransactionsDisplay = (transactions, accountsDisplay) => {\n    if (state.userView){\n      transactions = transactions.filter(transaction => transaction.user.username === state.userView)\n    } \n    if (state.accountView){\n      transactions = transactions.filter(transaction => transaction.account_id === state.accountView)\n    }\n     if (state.typeView){\n      //  accountsDisplay will already be filtered to account types selected \n      let account_ids = accountsDisplay.map(account => account.account_id) // [account_ids]\n      transactions = transactions.filter(transaction => account_ids.include(transaction.account_id) )\n\n    }\n    return transactions \n  }\n\n  const handleMonthDisplay = (transactions) => {\n    if (state.userView){\n      transactions = transactions.filter(items => items.user.username === state.userView)\n    } \n    return transactions\n  }\n\n\n\n  switch(action.type){\n\n    case 'storeData': \n    let transactions = action.data.transactions.sort( (trans1, trans2) => trans1.date > trans2.date ? -1 : 1 )\n      return{\n        ...state,\n        transactions: transactions,\n        accounts: action.data.accounts,\n      }\n\n    case 'addData':\n      return {\n        ...state,\n        transactions: [...state.transactions, ...action.data.transactions],\n        accounts: [...state.accounts, ...action.data.accounts],\n      }\n\n    case 'setUserView': \n      return {\n        ...state,\n        userView: action.username,\n      }\n\n    case \"setTypeView\": \n      let typeView = action.filter\n      if (typeView === state.typeView){typeView = null}  // toggle\n      return {\n        ...state,\n        typeView: typeView\n      }\n\n    case \"setAccountView\": \n      let accountView = action.filter\n      if (accountView === state.accountView){accountView = null} // toggle\n      return {\n        ...state,\n        accountView: accountView\n      }\n\n    case \"handleDisplay\":\n      // this may be an unneccsarily expensive. but its organized ah.\n      let today = new Date\n      let month = today.getMonth() + 1\n      let monthTransactions = state.transactions.filter(transaction => \n        parseInt(transaction.date.slice(5, 7)) === month\n      )\n      let accountsDisplay = handleAccountsDisplay(state.accounts)\n      // hm it says transactions is already declared here \n      let transactionsDisplay = handleTransactionsDisplay(state.transactions, accountsDisplay) // i need to pass accounts to filter tran by typeView\n      return{\n        ...state,\n        transactionsDisplay: transactionsDisplay,\n        accountsDisplay: accountsDisplay,\n        monthTransactions: handleMonthDisplay(monthTransactions) \n      }\n    case \"resetApp\":\n      return initialState;\n\n    default: {\n      return state\n    }\n\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}