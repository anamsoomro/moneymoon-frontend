{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudent/Desktop/moneys/frontend/src/containers/Dash.js\";\nimport React, { useEffect } from \"react\";\nimport AccountsPanel from './AccountsPanel';\nimport TransactionsPanel from '../components/TransactionPanel';\nimport BalancePanel from './BalancePanel';\nimport { connect } from 'react-redux';\n\nconst Dash = props => {\n  useEffect(() => {\n    if (localStorage.token) {\n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      }).then(resp => resp.json()).then(data => {\n        // for as many items this acount has. each object in array is a link item\n        if (!!data.transactions.length) {\n          // if user has no plaid items {trans: [], accounts: []}\n          let allAccounts = [];\n          data.accounts.map(item => item.map(account => allAccounts.push(account)));\n          let allTransactions = [];\n          data.transactions.map(item => item.map(transaction => allTransactions.push(transaction)));\n          let monthTransactions = [];\n          debugger; // 0:\n          // account_id: \"jnyB8aVgadF7ZMmvRPVnF8jlLpJ7Ppt1LVJbQ\"\n          // amount: 500\n          // category: (2) [\"Food and Drink\", \"Restaurants\"]\n          // category_id: \"13005000\"\n          // date: \"2020-04-25\"\n          // iso_currency_code: \"USD\"\n          // location: {}\n          // name: \"Tectra Inc\"\n          // payment_channel: \"in store\"\n          // payment_meta: {}\n          // pending: false\n          // transaction_id: \"MDrvKmMZmxtr1JBwgDPXHj48PvqRJAu9qrEor\"\n          // transaction_type: \"place\"\n          // user: {username: \"snm\", id: 2}\n          // __proto__: Object\n\n          let today = new Date();\n          let month = today.getMonth() + 1;\n          data.transactions.filter(transaction => {\n            transaction.date;\n          });\n          props.storeData({\n            transactions: allTransactions,\n            accounts: allAccounts\n          });\n        }\n      });\n    }\n  }, []); // second argument only runs it if state is diff. can specify certain states\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"dash\"> \n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(BalancePanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(AccountsPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(TransactionsPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }))\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    account_id: state.authReducer.account.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    storeData: data => dispatch({\n      type: \"storeData\",\n      data: data\n    }) // data = {transactions: [...], accounts: [...]}\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dash);","map":{"version":3,"sources":["/Users/flatironstudent/Desktop/moneys/frontend/src/containers/Dash.js"],"names":["React","useEffect","AccountsPanel","TransactionsPanel","BalancePanel","connect","Dash","props","localStorage","token","fetch","account_id","method","headers","Authorization","then","resp","json","data","transactions","length","allAccounts","accounts","map","item","account","push","allTransactions","transaction","monthTransactions","today","Date","month","getMonth","filter","date","storeData","mapStateToProps","state","authReducer","id","mapDispatchToProps","dispatch","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAEtBN,EAAAA,SAAS,CAAE,MAAK;AACd,QAAIO,YAAY,CAACC,KAAjB,EAAuB;AACrBC,MAAAA,KAAK,CAAE,kCAAiCH,KAAK,CAACI,UAAW,WAApD,EAAgE;AACnEC,QAAAA,MAAM,EAAE,KAD2D;AAEnEC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAG,UAASN,YAAY,CAACC,KAAM;AAFrC;AAF0D,OAAhE,CAAL,CAOCM,IAPD,CAOMC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAPd,EAQCF,IARD,CAQMG,IAAI,IAAI;AACZ;AACA,YAAI,CAAC,CAACA,IAAI,CAACC,YAAL,CAAkBC,MAAxB,EAA+B;AAAE;AAC/B,cAAIC,WAAW,GAAG,EAAlB;AACAH,UAAAA,IAAI,CAACI,QAAL,CAAcC,GAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACD,GAAL,CAASE,OAAO,IAAIJ,WAAW,CAACK,IAAZ,CAAiBD,OAAjB,CAApB,CAA3B;AACA,cAAIE,eAAe,GAAG,EAAtB;AACAT,UAAAA,IAAI,CAACC,YAAL,CAAkBI,GAAlB,CAAuBC,IAAI,IAAIA,IAAI,CAACD,GAAL,CAASK,WAAW,IAAID,eAAe,CAACD,IAAhB,CAAqBE,WAArB,CAAxB,CAA/B;AACA,cAAIC,iBAAiB,GAAG,EAAxB;AACA,mBAN6B,CAO7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,cAAIC,KAAK,GAAGF,KAAK,CAACG,QAAN,KAAmB,CAA/B;AACAf,UAAAA,IAAI,CAACC,YAAL,CAAkBe,MAAlB,CAAyBN,WAAW,IAAI;AACtCA,YAAAA,WAAW,CAACO,IAAZ;AACD,WAFD;AAGA5B,UAAAA,KAAK,CAAC6B,SAAN,CAAgB;AAACjB,YAAAA,YAAY,EAAEQ,eAAf;AAAgCL,YAAAA,QAAQ,EAAED;AAA1C,WAAhB;AACD;AACF,OAxCD;AAyCD;AACF,GA5CQ,EA4CN,EA5CM,CAAT,CAFsB,CA8Cf;;AAEP;AAAA;AACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF;AAFF;AAQD,CAxDD;;AA0DA,MAAMgB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACL3B,IAAAA,UAAU,EAAE2B,KAAK,CAACC,WAAN,CAAkBd,OAAlB,CAA0Be;AADjC,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLN,IAAAA,SAAS,EAAKlB,IAAD,IAAUwB,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,WAAP;AAAoBzB,MAAAA,IAAI,EAAEA;AAA1B,KAAD,CAD1B,CAC8D;;AAD9D,GAAP;AAGD,CAJD;;AAMA,eAAeb,OAAO,CAACgC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CnC,IAA7C,CAAf","sourcesContent":["import React, { useEffect } from \"react\"\nimport AccountsPanel from './AccountsPanel'\nimport TransactionsPanel from '../components/TransactionPanel'\nimport BalancePanel from './BalancePanel'\nimport {connect} from 'react-redux'\n\nconst Dash = (props) => {\n\n  useEffect( () =>{\n    if (localStorage.token){ \n      fetch(`http://localhost:3000/accounts/${props.account_id}/get_data`, {\n        method: \"GET\", \n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.token}`\n        }\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        // for as many items this acount has. each object in array is a link item\n        if (!!data.transactions.length){ // if user has no plaid items {trans: [], accounts: []}\n          let allAccounts = []\n          data.accounts.map( item => item.map(account => allAccounts.push(account)))\n          let allTransactions = [] \n          data.transactions.map( item => item.map(transaction => allTransactions.push(transaction)))\n          let monthTransactions = [] \n          debugger\n          // 0:\n          // account_id: \"jnyB8aVgadF7ZMmvRPVnF8jlLpJ7Ppt1LVJbQ\"\n          // amount: 500\n          // category: (2) [\"Food and Drink\", \"Restaurants\"]\n          // category_id: \"13005000\"\n          // date: \"2020-04-25\"\n          // iso_currency_code: \"USD\"\n          // location: {}\n          // name: \"Tectra Inc\"\n          // payment_channel: \"in store\"\n          // payment_meta: {}\n          // pending: false\n          // transaction_id: \"MDrvKmMZmxtr1JBwgDPXHj48PvqRJAu9qrEor\"\n          // transaction_type: \"place\"\n          // user: {username: \"snm\", id: 2}\n          // __proto__: Object\n          let today = new Date\n          let month = today.getMonth() + 1\n          data.transactions.filter(transaction => {\n            transaction.date\n          })\n          props.storeData({transactions: allTransactions, accounts: allAccounts})\n        }\n      })\n    }\n  }, []) // second argument only runs it if state is diff. can specify certain states\n\n  return (\n    // <div className=\"dash\"> \n    <div > \n      <BalancePanel /> \n      <AccountsPanel /> \n      <TransactionsPanel /> \n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return { \n    account_id: state.authReducer.account.id\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeData: ( (data) => dispatch({type: \"storeData\", data: data}) ) // data = {transactions: [...], accounts: [...]}\n  }\n} \n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dash);\n\n\n"]},"metadata":{},"sourceType":"module"}